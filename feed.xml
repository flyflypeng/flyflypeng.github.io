<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fly Higher&apos;s Blog</title>
    <description>Do one thing and do it well.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 30 Jan 2023 19:59:06 +0800</pubDate>
    <lastBuildDate>Mon, 30 Jan 2023 19:59:06 +0800</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>论文分享 - VirtualFlow: Decoupling Deep Learning Models from the underlying Hardware</title>
        <description>&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;Or, Andrew, Haoyu Zhang, and Michael None Freedman. “Virtualflow: Decoupling deep learning models from the underlying hardware.” &lt;em&gt;Proceedings of Machine Learning and Systems&lt;/em&gt; 4 (2022): 126-140.&lt;/p&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Tensorflow的AI框架中已经用Executor的概念抽象解耦了底层的实际执行硬件，VirtualFlow所抽象的Virtual Nodes与Executor相比有什么差异？
    &lt;blockquote&gt;
      &lt;p&gt;传统的AI框架中Virtual Nodes和Physical Accelerators资源的映射关系是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt;，例如在Tensorflow中每个GPU设备对应一个抽象的Executor对象。
但是这只是&lt;strong&gt;时间和资源空间中的一种划分方式&lt;/strong&gt;
VirtualFlow则是将时间和资源两个维度组成的空间进行划分，拓展了传统AI框架中的Virtual Nodes和Physical Accelerators资源&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt;的映射关系
VirtualFlow的一个创新点就&lt;strong&gt;在于用时间换空间，并保持模型的收敛速度和模型精度不变&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;模型的收敛性和batch-size/learning-rate这些的hyperparameters之间的关系是什么？
    &lt;blockquote&gt;
      &lt;p&gt;在说模型收敛的时候，&lt;strong&gt;一般指的是训练、验证损失曲线没有大的波动&lt;/strong&gt;，而且随着训练轮数不断增加，波动依然可以在一定容忍范围内。
个人理解，收敛的意义是系统稳定，就是模型的某一个权重参数发生小的改变的时候，模型输出结果不会发生强烈变化，导致系统崩溃，也就是所谓的发散。
网络模型不收敛直观体现是&lt;strong&gt;loss函数无法下降&lt;/strong&gt;，本质上是网络或者训练方法有问题，包括batch-size大小，是否数据归一化，学习率设计，初始化权重等，这些都需要检查一下&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;VirtualFlow的Virtual Nodes是怎么保证模型的收敛性？
    &lt;blockquote&gt;
      &lt;p&gt;场景说明：原来大模型难以在资源较小规模的GPU集群上直接复用原来的Hyperparameters进行训练，因为原来在大集群上使用的batch-size在不修改的情况下，在小规模的GPU集群上运行不起来。如果直接调整模型的Hyperparameters适应小规模的GPU集群，那么就会存在模型收敛性和模型精度变化的问题
所以，VirtualFlow是直接用与原始大规模集群训练场景相同数量的Virtual Nodes节点来模拟原始大规模集群中的GPU节点，这样就不需要调整模型的Hyperparameters参数。
文中的一个可重现相同模型精度的实验设计，也可以看到所有的实验对照组中所有的virtual nodes的数量是相同。
&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20230130153829.png&quot; alt=&quot;&quot; /&gt;
 &lt;strong&gt;总结一下就是VirtualFlow通过Virtual Nodes模拟出了和原场景相同的GPU数量，自己封装了Virtual Nodes到Physical GPU Resource之间的复杂的映射关系和处理逻辑&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;VirtualFlow中不同模型的Virtual Nodes设置多大才比较合适呢？
    &lt;blockquote&gt;
      &lt;p&gt;这个需要根据具体的场景进行选择。&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;在论文中重点提到的&lt;strong&gt;用小规模GPU集群模拟大集群分布式的训练场景&lt;/strong&gt;下，Virtual Nodes的数量应该和原始场景中GPU的数量保持一致&lt;/li&gt;
        &lt;li&gt;如果是利用VirtualFlow实现利用不同类型GPU资源的异构训练场景时，则需要通过论文中提到的&lt;strong&gt;异构资源分配求解器 + 离线特征提取&lt;/strong&gt;进行求解，得到最优地资源分配方式&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;模型与底层硬件强耦合的两个因素：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hyperparameters与底层硬件强耦合&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;训练过程中的&lt;strong&gt;Hyperparameters&lt;/strong&gt;（例如learning rata, batch size, dropout rate）对于&lt;strong&gt;模型收敛性影响非常大&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;一些利用大规模加速器硬件资源和大batch-size训练得到的模型，很难通过小规模的加速器资源复现出相同的模型结果，主要原因是大规模训练集群中batch-size较大，而相同的batch-size无法适用在小规模的集群中，如果通过缩小batch-size大小，则模型训练的收敛性则存在较大的差异&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;模型的计算图与底层硬件强耦合&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;计算图中会强耦合底层硬件加速器资源的信息（例如分布式训练中的模型参数同步策略）&lt;/li&gt;
      &lt;li&gt;模型训练过程中资源弹性扩展性差，调整硬件加速器资源需要涉及到一系列的模型参数checkpoint和restore，计算图重新编译优化等一系列操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtual-node处理流程&quot;&gt;Virtual Node处理流程&lt;/h2&gt;

&lt;p&gt;Virtual Node概念抽象：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;从模型的角度来看，计算单元就是虚拟的Virtual Nodes，只要Virtual Nodes的数量不发生变化，那么模型的batch-size和收敛精度都将保持不变&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20230129112137.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VirtualFlow内存开销&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;VirtualFlow的内存开销主要来自于Gradient Buffer，这个Buffer是同一个物理硬件加速器的所有Virtual Node所共享
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20230129114044.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gradient Buffer的大小跟模型参数大小成正相关，与batch-size无关，通常在训练过程中只占显存非常小的一个比例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VirtualFlow中关于时间和资源的权衡：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;传统的AI框架中Virtual Nodes和Physical Accelerators资源的映射关系是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt;，但是这只是&lt;strong&gt;时间和资源空间中的一种划分方式&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;VirtualFlow则是将时间和资源两个维度组成的空间进行划分，拓展了传统AI框架中的Virtual Nodes和Physical Accelerators资源&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:1&lt;/code&gt;的映射关系&lt;/li&gt;
  &lt;li&gt;VirtualFlow的一个创新点就&lt;strong&gt;在于用时间换空间，并保持模型的收敛速度和模型精度不变&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20230129115440.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;资源弹性扩缩容&quot;&gt;资源弹性扩缩容&lt;/h2&gt;

&lt;p&gt;VirtualFlow相比于已有的GPU Cluster Schedulers的区别：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在集群底层物理加速器资源扩缩时，&lt;strong&gt;无需中断已经在运行的Job和从checkpoint处恢复执行&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;已有的GPU集群调度器&lt;strong&gt;无法在不损害模型收敛性和精度的条件下&lt;/strong&gt;，动态地&lt;strong&gt;重新调整模型训练任务所需的资源大小&lt;/strong&gt;（举了一个例子，Job A需要2个GPU，Job B需要8个GPU，但是现在环境上只有8个GPU，如果无法调整Job的资源需求大小，那么这两个Job根本无法同时运行，而当Job A运行时，则剩余的6个GPU就会浪费）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;能够动态地调整Job对于资源的需求，可以大大地增加新的调度机会点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;多种异构资源协同训练&quot;&gt;多种异构资源协同训练&lt;/h2&gt;

&lt;p&gt;当前最新的AI框架在加速器资源分配时有一个前提假设：&lt;strong&gt;同一个Job只能分配使用相同的加速器资源（同种架构和同种硬件型号）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;存在的两个挑战：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如何有效地将virtual nodes映射到实际的异构加速器资源？
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;离线特征提取&lt;/strong&gt;：根据不同type resource类型和batch-size进行进行offline profiling，&lt;strong&gt;获取到不同type resource各自batch-size和throughput之间的关系&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;异构资源分配求解器&lt;/strong&gt;：通过公式归一化抽象出得到异构资源的分配方式，然后进行求解
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20230129164843.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何提供与同构资源相同的训练语义？
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;梯度值同步&lt;/strong&gt;：通过不同的加速器上的梯度加权平均方法，保证梯度同步时的不同加速器设备上的梯度值汇聚均分时的&lt;strong&gt;正确性&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;数据分片&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实验分析&quot;&gt;实验分析&lt;/h2&gt;

&lt;p&gt;直接看论文里面的Evaluation章节吧，实验部分主要分为：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;验证大规模集群模型训练在小规模集群上的复现，并保持模型精度不下降&lt;/li&gt;
  &lt;li&gt;验证VirtualFlow框架的资源弹性伸缩能力&lt;/li&gt;
  &lt;li&gt;验证VirtualFlow框架的多类型异构资源协同训练能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;VirtualFlow的核心思想类似于&lt;strong&gt;GPU虚拟化中的一虚多&lt;/strong&gt;，同一个物理GPU分时模拟多个GPU，它的一个好处就是不需要等到所有的物理资源需求都满足时才能开始工作，可以更灵活地组合多个任务共同执行，提高整个资源的资源利用率&lt;/li&gt;
  &lt;li&gt;VirtualFlow的主要工作
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;模型收敛性保障&lt;/strong&gt;：小规模GPU集群模拟大规模集群训练模型的场景，可以保证模型的收敛性和模型精度&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;资源弹性伸缩&lt;/strong&gt;：VirtualFlow维护了Virtual Node到Physical GPU之间的映射关系，可以动态地调整物理资源在各个Job之间分配，提高资源利用率，并屏蔽底层物理资源动态伸缩带来的影响&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;异构资源协同训练&lt;/strong&gt;：充分利用系统中多种异构计算资源，通过Virtual Nodes屏蔽底层资源的差异，利用离线训练提取关键特征，然后通过求解器得出最优地Virtual Node到Physical Node的映射关系&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;论文中&lt;strong&gt;没有详细地阐述关于Virtual Node是如何建模&lt;/strong&gt;的，例如它模拟的GPU的显存多大，CUDA Core的数量是多少。如果Virtual Node模拟的显存大于底层实际GPU硬件设备的显存大小，Virtual Node就无法完成到实际GPU设备之间的映射&lt;/li&gt;
  &lt;li&gt;VirtualFlow在大模型场景（单个模型参数大小无法存放在单个GPU节点上）时，如何将模型并行和数据并行相结合；还有复杂的多节点分布式训练场景下，如何做好Virtual Node到Distributed Physical GPU资源之间的映射（&lt;strong&gt;好像这种情况就退化成了GPU资源池化拉远的场景&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://slideslive.ch/38987813/virtualflow-decoupling-deep-learning-models-from-the-underlying-hardware?ref=recommended&quot;&gt;slides-MLSys 2022-VirtualFlow: Decoupling Deep Learning Models from the Underlying Hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cindycindy/p/13470925.html&quot;&gt;深度学习什么是收敛？&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 29 Jan 2023 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AE%BA%E6%96%87/2023/01/29/%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB-VirtualFlow-MLSys-2022.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AE%BA%E6%96%87/2023/01/29/%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB-VirtualFlow-MLSys-2022.html</guid>
        
        <category>MLSys</category>
        
        <category>论文</category>
        
        <category>AI</category>
        
        
        <category>论文</category>
        
      </item>
    
      <item>
        <title>VSCode配置Linux内核源码阅读环境</title>
        <description>&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;简单记录一下在VSCode IDE上配置Linux内核源码阅读环境的方法，欢迎自取自用😁&lt;/p&gt;

&lt;h2 id=&quot;开发环境说明&quot;&gt;开发环境说明&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;主力开发机: MacBook Pro M1 14’ + VSCode IDE&lt;/li&gt;
  &lt;li&gt;Linux Server:  Ubuntu 20.04.03&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;平时的开发方式就是在我的Macbook Pro上打开VSCode IDE，然后通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remote SSH&lt;/code&gt;插件远程连接到我家里的Linux Server上进行Linux内核源码阅读和开发工作&lt;/p&gt;

&lt;h2 id=&quot;配置流程&quot;&gt;配置流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;通过Remote SSH插件，从Macbook Pro上连接到远端的Linux开发机中&lt;/li&gt;
  &lt;li&gt;安装C/C++官方插件&lt;/li&gt;
  &lt;li&gt;在Ubuntu开发机上通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install global&lt;/code&gt;安装global工具&lt;/li&gt;
  &lt;li&gt;安装C/C++ GNU Global插件&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在VSCode的命令行界面中通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Global:Rebuild Gtags Database&lt;/code&gt;
&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20220423225830.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;过几分钟生成完毕，就会在linux源码目录下生成GTAGS、GRTAGS、GPATH三个tag数据库文件
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;linux-kernel-source-dir&amp;gt;

 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;G&quot;&lt;/span&gt;
 4:COPYING
 10:GPATH
 11:GRTAGS
 12:GTAGS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;最好重新加载一下工作区，然后就可以通过代码定义跳转的快捷键进行跳转了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20220423225955.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Apr 2022 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%88%A9%E5%99%A8/2022/04/23/vscode%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%88%A9%E5%99%A8/2022/04/23/vscode%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
        
        <category>vscode</category>
        
        <category>kernel</category>
        
        
        <category>利器</category>
        
      </item>
    
      <item>
        <title>kata-containers 2.x 版本安装运行</title>
        <description>&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;家里的电脑重装了系统，原来环境上的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kata-containers 1.x&lt;/code&gt;版本也没有了，所以趁着这个机会就鼓捣一下在新的Ubuntu 20.04系统上安装一个最新的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kata-containers 2.4.0&lt;/code&gt;版本。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kata社区推荐从Linux发行版的软件源中安装kata安全容器组件，但是社区只提供了CentOS 8 和 Fedora 34 以上版本配套的官方软件安装包：&lt;a href=&quot;https://github.com/kata-containers/kata-containers/tree/main/docs/install#official-packages&quot;&gt;Official packages&lt;/a&gt;
Ubuntu系统可以采用Snap包管理器进行安装：&lt;a href=&quot;https://github.com/kata-containers/kata-containers/tree/main/docs/install#snap-installation&quot;&gt;Snap Installation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述官方推荐的方法都是简单的一键安装方式，如果想弄清楚kata软件安装包中有什么文件内容，建议直接下载社区发布已经预编译好的二进制安装包进行手动安装。所以，本文中主要介绍的是如何在一台Ubuntu系统中安装kata-containers 2.x版本二进制软件包。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：kata官方社区提供的只有x86架构预编译好的二进制压缩包，如果你的机器arm64架构版本，那么你只能参考社区的编译方法手动编译安装了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;安装准备&quot;&gt;安装准备&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 准备一台Linux系统的物理机，Ubuntu、openEuler、CentOS等常见的Linux发行版系统都可以&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 确保的你的机器环境上已经开启了BIOS中的硬件虚拟化加速支持&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以通过下面的命令来检查你物理机上的CPU是否是支持硬件虚拟化加速功能：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&apos;(vmx|svm)&apos;&lt;/span&gt; /proc/cpuinfo

flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d
vmx flags	: vnmi preemption_timer invvpid ept_x_only ept_ad ept_1gb flexpriority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest ple pml ept_mode_based_exec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果输出的结果中包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmx或svm&lt;/code&gt;，恭喜你的CPU支持硬件虚拟化能力。&lt;/p&gt;

&lt;p&gt;检查完CPU是否支持硬件虚拟化能力之后，你还需要确认你物理机上的BIOS是否开启了硬件虚拟化能力。&lt;/p&gt;

&lt;p&gt;开启的方法也非常简单，步骤如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;根据机器所安装主板的厂商，搜索一下进入BIOS的按键上什么，一般都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F12&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC&lt;/code&gt;键等&lt;/li&gt;
  &lt;li&gt;重启电脑，然后一直按住进入BIOS的按键，等待进入BIOS环境&lt;/li&gt;
  &lt;li&gt;进入BIOS配置界面后，找到CPU处理器的设置界面，然后开启虚拟化技术支持。&lt;/li&gt;
  &lt;li&gt;保存后退出，然后正常进入系统启动流程，启动系统&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;3. 加载KVM虚拟化模块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在一般发行版系统中都保存有KVM内核模块文件，只需要手动加载一下即可：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;modprobe kvm kvm_intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看KVM模块是否加载到内核中了：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo lsmod | grep kvm
kvm_intel             303104  0
kvm                   864256  1 kvm_intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;手动安装&quot;&gt;手动安装&lt;/h2&gt;

&lt;h3 id=&quot;安装kata-containers二进制组件&quot;&gt;安装kata-containers二进制组件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kata-containers&lt;/code&gt;官方社区下载编译好的二进制压缩包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从下载链接页面中找到最新release的二进制压缩包即可
下载链接：https://github.com/kata-containers/kata-containers/releases&lt;/p&gt;

&lt;p&gt;下载图中红色框起来的压缩包：
&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/20220422230322.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 解压二进制软件包，并拷贝到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/&lt;/code&gt;目录下&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下载下来的二进制软件包采用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xz&lt;/code&gt;命令进行解压，得到如下的目录和文件，其结构如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; kata-static-2.4.0-x86_64.tar.xz

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;kata-static-2.4.0-x86_64.tar.xz  opt

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; 4 ./opt/
./opt/
└── kata
    ├── bin
    │   ├── cloud-hypervisor
    │   ├── containerd-shim-kata-v2
    │   ├── firecracker
    │   ├── jailer
    │   ├── kata-collect-data.sh
    │   ├── kata-monitor
    │   ├── kata-runtime
    │   └── qemu-system-x86_64
    ├── libexec
    │   └── kata-qemu
    │       └── virtiofsd
    └── share
        ├── bash-completion
        │   └── completions
        ├── defaults
        │   └── kata-containers
        ├── kata-containers
        │   ├── config-5.15.26
        │   ├── kata-alpine-3.15.initrd
        │   ├── kata-clearlinux-latest.image
        │   ├── kata-containers-initrd.img -&amp;gt; kata-alpine-3.15.initrd
        │   ├── kata-containers.img -&amp;gt; kata-clearlinux-latest.image
        │   ├── vmlinux-5.15.26-90
        │   ├── vmlinux.container -&amp;gt; vmlinux-5.15.26-90
        │   ├── vmlinuz-5.15.26-90
        │   └── vmlinuz.container -&amp;gt; vmlinuz-5.15.26-90
        └── kata-qemu
            └── qemu

12 directories, 18 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简要介绍一下上述各个目录中存放文件的作用：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata/bin&lt;/code&gt;：该目录下主要存放了kata运行时相关的二进制文件（例如最主要的二进制文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd-shim-kata-v2&lt;/code&gt;）、虚拟化组件的二进制文件，例如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qemu-system-x86_64&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata/libexec/kata-qemu&lt;/code&gt;：该目录存放的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtiofsd&lt;/code&gt;二进制文件，它的作用事在宿主机上作为virtiofs的后端，实现宿主机和安全容器虚拟机中之间目录文件的共享&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata/share/bash-completion&lt;/code&gt;：该目录下存放的就是bash环境中的自动补全脚本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata/share/defaults/kata-containers/&lt;/code&gt;：该目录下存放的是kata-containers安全容器的配置文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.toml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata/share/kata-containers/&lt;/code&gt;：该目录下存放的则是安全容器中Guest Kernel的裁剪的配置选项文件、Guest OS的initrd格式和image格式镜像，以及Guest Kernel的二进制文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata/share/kata-qemu/qemu&lt;/code&gt;：该目录下主要存放了qemu虚拟化相关的bios二进制文件、firmware固件信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后，把解压到当前目录下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./opt/kata&lt;/code&gt;文件夹给移动到根目录下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/&lt;/code&gt;下面：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; ./opt/kata /opt/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. 将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd-shim-kata-v2&lt;/code&gt;二进制软链接到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/&lt;/code&gt;目录下，以便containerd容器引擎可以找到kata运行时对应的二进制文件&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /opt/kata/bin/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装和配置containerd容器引擎&quot;&gt;安装和配置containerd容器引擎&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 安装containerd&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kata-containers 2.x&lt;/code&gt;版本已经不支持OCI Runtime Spec的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shimv1&lt;/code&gt;标准，因此需要通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt;容器引擎或者我们在openEuler上开源的&lt;a href=&quot;https://gitee.com/openeuler/iSulad&quot;&gt;iSulad&lt;/a&gt;容器引擎来支持&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Containerd-Shimv2&lt;/code&gt;接口标准。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我本地的环境上Ubuntu系统，并且我之前环境中已经装过了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Docker CE 20.10.14&lt;/code&gt;版本。由于在安装Docker软件包的同时，它也会安装好&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt;组件。&lt;/p&gt;

&lt;p&gt;所以，这里建议你直接参考Docker官方的教程来安装Docker，顺便完成containerd组件的安装。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-docker-ce&quot;&gt;Get Docker CE for Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 修改containerd配置文件，支持kata运行时&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;containerd默认的配置文件路径：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/containerd/config.toml&lt;/code&gt;，将该文件中的内容修改为如下的内容，添加对于kata容器运行时的支持：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /etc/containerd/config.toml
#   Copyright 2018-2022 Docker Inc.

#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

disabled_plugins = [&quot;cri&quot;]

root = &quot;/var/lib/containerd&quot;
state = &quot;/run/containerd&quot;
subreaper = true
oom_score = 0

[grpc]
  address = &quot;/run/containerd/containerd.sock&quot;
  uid = 0
  gid = 0

#[debug]
#  address = &quot;/run/containerd/debug.sock&quot;
#  uid = 0
#  gid = 0
#  level = &quot;info&quot;

[plugins]
  [plugins.&quot;io.containerd.grpc.v1.cri&quot;]
    [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]
      default_runtime_name = &quot;kata&quot;
      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]
        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.kata]
          runtime_type = &quot;io.containerd.kata.v2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：上面的containerd配置文件中，我已经把Docker安装包默认安装时配置的containerd.toml文件做了一些修改，把很多注释掉的配置选项都打开了。
其中，关于kata容器运行时的配置主要集中在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[plugins]&lt;/code&gt;配置项中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. 重启containerd系统服务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;完成上述的配置之后，重启一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd.service&lt;/code&gt;系统服务，使配置生效。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart containerd

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status containerd.service
● containerd.service - containerd container runtime
     Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/lib/systemd/system/containerd.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Fri 2022-04-22 21:52:39 CST&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 1h 47min ago
       Docs: https://containerd.io
    Process: 388705 &lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/sbin/modprobe overlay &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited, &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0/SUCCESS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Main PID: 388706 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;containerd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Tasks: 11
     Memory: 19.0M
     CGroup: /system.slice/containerd.service
             └─388706 /usr/bin/containerd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;测试kata安全容器是否安装成功&quot;&gt;测试kata安全容器是否安装成功&lt;/h2&gt;

&lt;p&gt;好了，通过上面的步骤我们已经在本地的机器上安装好kata安全容器的二进制软件包和containerd容器引擎，接下来我们通过下面的命令来验证一下安装的kata安全容器是否已经安装成功。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker.io/library/busybox:latest&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ctr image pull &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 查看安全容器中Guest Kernel的版本号&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ctr run &lt;span class=&quot;nt&quot;&gt;--runtime&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;io.containerd.kata.v2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; test-kata &lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;

5.15.26

&lt;span class=&quot;c&quot;&gt;# 查看物理机上安装的Linux内核版本号，两者不同则说明安全容器已经成功运行了&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
5.13.0-30-generic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外，我们还可以启动一个kata安全容器，在宿主机上观察是否存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qemu&lt;/code&gt;进程：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ctr run &lt;span class=&quot;nt&quot;&gt;--runtime&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;io.containerd.kata.v2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; test-kata &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;999999

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;qemu
root      395216  395206  0 23:47 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd &lt;span class=&quot;nt&quot;&gt;--syslog&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; no_posix_lock &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/kata-containers/shared/sandboxes/test-kata/shared &lt;span class=&quot;nt&quot;&gt;--fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--thread-pool-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; announce_submounts
root      395223       1  1 23:47 ?        00:00:00 /opt/kata/bin/qemu-system-x86_64 &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; sandbox-test-kata &lt;span class=&quot;nt&quot;&gt;-uuid&lt;/span&gt; 9ecd8760-80dc-41c1-8e4e-58adc4f68079 &lt;span class=&quot;nt&quot;&gt;-machine&lt;/span&gt; q35,accel&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kvm,kernel_irqchip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,nvdimm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on &lt;span class=&quot;nt&quot;&gt;-cpu&lt;/span&gt; host,pmu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-qmp&lt;/span&gt; unix:/run/vc/vm/test-kata/qmp.sock,server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,wait&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 2048M,slots&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10,maxmem&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;16688M &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; pci-bridge,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pcie.0,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pci-bridge-0,chassis_nr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1,shpc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off,addr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2,io-reserve&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k,mem-reserve&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m,pref64-reserve&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-serial-pci,disable-modern&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;serial0 &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtconsole,chardev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;charconsole0,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;console0 &lt;span class=&quot;nt&quot;&gt;-chardev&lt;/span&gt; socket,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;charconsole0,path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/vc/vm/test-kata/console.sock,server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,wait&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; nvdimm,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nv0,memdev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mem0,unarmed&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on &lt;span class=&quot;nt&quot;&gt;-object&lt;/span&gt; memory-backend-file,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mem0,mem-path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/kata/share/kata-containers/kata-clearlinux-latest.image,size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;134217728,readonly&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-scsi-pci,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi0,disable-modern&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-object&lt;/span&gt; rng-random,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rng0,filename&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/urandom &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-rng-pci,rng&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rng0 &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; vhost-vsock-pci,disable-modern&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,vhostfd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vsock-3535502973,guest-cid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3535502973 &lt;span class=&quot;nt&quot;&gt;-chardev&lt;/span&gt; socket,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;char-59c971d21afa49b1,path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/vc/vm/test-kata/vhost-fs.sock &lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; vhost-user-fs-pci,chardev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;char-59c971d21afa49b1,tag&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kataShared &lt;span class=&quot;nt&quot;&gt;-rtc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utc,driftfix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;slew,clock&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;-global&lt;/span&gt; kvm-pit.lost_tick_policy&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;discard &lt;span class=&quot;nt&quot;&gt;-vga&lt;/span&gt; none &lt;span class=&quot;nt&quot;&gt;-no-user-config&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nodefaults&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nographic&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-reboot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-daemonize&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-object&lt;/span&gt; memory-backend-file,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dimm1,size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2048M,mem-path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/shm,share&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on &lt;span class=&quot;nt&quot;&gt;-numa&lt;/span&gt; node,memdev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dimm1 &lt;span class=&quot;nt&quot;&gt;-kernel&lt;/span&gt; /opt/kata/share/kata-containers/vmlinux-5.15.26-90 &lt;span class=&quot;nt&quot;&gt;-append&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tsc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;reliable no_timer_check rcupdate.rcu_expedited&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 i8042.direct&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 i8042.dumbkbd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 i8042.nopnp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 i8042.noaux&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 noreplace-smp &lt;span class=&quot;nv&quot;&gt;reboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;k &lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hvc0 &lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hvc1 cryptomgr.notests net.ifnames&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;pci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lastbus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/pmem0p1 &lt;span class=&quot;nv&quot;&gt;rootflags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dax,data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ordered,errors&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;remount-ro ro &lt;span class=&quot;nv&quot;&gt;rootfstype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ext4 quiet systemd.show_status&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;nr_cpus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 systemd.unit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kata-containers.target systemd.mask&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;systemd-networkd.service systemd.mask&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;systemd-networkd.socket scsi_mod.scan&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none &lt;span class=&quot;nt&quot;&gt;-pidfile&lt;/span&gt; /run/vc/vm/test-kata/pid &lt;span class=&quot;nt&quot;&gt;-smp&lt;/span&gt; 1,cores&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1,threads&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1,sockets&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4,maxcpus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
root      395226  395216  0 23:47 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd &lt;span class=&quot;nt&quot;&gt;--syslog&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; no_posix_lock &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/kata-containers/shared/sandboxes/test-kata/shared &lt;span class=&quot;nt&quot;&gt;--fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--thread-pool-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; announce_submounts
flyflyp+  395289  380349  0 23:47 pts/3    00:00:00 &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.bzr &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CVS &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.git &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.hg &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.svn &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.idea &lt;span class=&quot;nt&quot;&gt;--exclude-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.tox qemu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看来真的是通过qemu hypervisor把安全容器虚拟机给拉起来了，如果大家有兴趣，可以分析一下这个qemu进程中各个命令行参数的含义。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kata-containers/kata-containers/blob/main/docs/install/container-manager/containerd/containerd-install.md&quot;&gt;Install Kata Containers with containerd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitee.com/openeuler/iSulad/blob/master/docs/integration.md&quot;&gt;iSulad配置支持kata安全容器文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 22 Apr 2022 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/2022/04/22/kata-containers-2-x-%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/2022/04/22/kata-containers-2-x-%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C.html</guid>
        
        <category>云原生</category>
        
        <category>kata-containers</category>
        
        <category>sandbox</category>
        
        
        <category>云原生</category>
        
      </item>
    
      <item>
        <title>ptrace 系统调用拦截和模拟</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;在gVisor沙箱项目中，Google采用了两种不同的系统调用拦截方式：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;KVM模式&lt;/li&gt;
  &lt;li&gt;ptrace模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，在&lt;a href=&quot;https://arxiv.org/pdf/2108.03705.pdf&quot;&gt;Safe and Secure Subprocess Virtualization in Userspace&lt;/a&gt;中也提到了采用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;实现系统调用拦截。&lt;/p&gt;

&lt;p&gt;以前对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;的概念还停留在它是实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace&lt;/code&gt;命令的基础，具体底层的实现原理就一无所知了，因此这篇笔记主要事项记录一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;是如何实现系统调用拦截。&lt;/p&gt;

&lt;h2 id=&quot;ptrace-定义&quot;&gt;ptrace 定义&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace(2)&lt;/code&gt; (“process trace”)是Linux系统中的一个系统调用（syscall），它通常用于实现进程debugging功能。&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;系统调用，tracer（跟踪者）可以暂停tracee（被跟踪者）的执行流程，查看和设置tracee的内存和寄存器中的内容、监控系统调用的执行过程，甚至可以用来拦截模拟系统调用。&lt;/p&gt;

&lt;p&gt;ptrace系统调用函数的定义：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;request：表示需要执行什么样的ptrace操作，通常有下面几种常用的取值
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_TRACEME&lt;/code&gt;：表示当前进程将被它的parent进程进行跟踪&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt;：表示遇到下一个待执行的系统调用入口时停止tracee进程或系统调用在内核态执行完毕返回后停止，以便tracer获取系统调用的返回值&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_GETREGS&lt;/code&gt;：获取tracee进程中当前的寄存器中的值&lt;/li&gt;
      &lt;li&gt;其他的request的取值，详见&lt;a href=&quot;https://man7.org/linux/man-pages/man2/ptrace.2.html&quot;&gt;ptrace(2) — Linux manual page&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pid：表示被跟踪者的PID进程ID&lt;/li&gt;
  &lt;li&gt;addr和data：这两个是ptrace函数中通用参数，例如在读取tracee的寄存器值时，data参数就会传入保存寄存器内容变量的地址；而在一些场景下，这两个参数没有任何意义，通常默认传入0值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基于ptrace实现strace命令流程分析&quot;&gt;基于ptrace实现strace命令流程分析&lt;/h2&gt;

&lt;p&gt;基于ptrace系统调用实现的一个简化版本&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace&lt;/code&gt;命令的代码如下所示：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;too few arguments: %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* error */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* child */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_TRACEME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Because we&apos;re now a tracee, execvp will block until the parent
             * attaches and allows us to continue. */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;execvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* parent */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sync with execvp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SETOPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTRACE_O_EXITKILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Enter next system call */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Gather system call arguments */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_regs_struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_GETREGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Print a representation of the system call */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%ld(%ld, %ld, %ld, %ld, %ld, %ld)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Run system call and stop on exit */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Get system call result */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_GETREGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; = ?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ESRCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// system call was _exit(2) or similar&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FATAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Print system call result */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; = %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码流程简单总结一下就是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt;系统调用创建出待跟踪的tracee进程，这里使用到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; ptrace(PTRACE_TRACEME, 0, 0, 0)&lt;/code&gt;函数&lt;/li&gt;
  &lt;li&gt;设置父进程strace进程退出后，杀死tracee进程，这里使用到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_EXITKILL)&lt;/code&gt;函数&lt;/li&gt;
  &lt;li&gt;接下来就是一个死循环，不断地重复执行以下的流程：执行到tracee进程的系统调用入口处停止-&amp;gt;获取系统调用参数信息-&amp;gt;执行系统调用并等待返回后停止-&amp;gt;获取系统调用执行返回结果
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;执行到tracee进程的系统调用入口处停止&lt;/strong&gt;：这里使用到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace(PTRACE_SYSCALL, pid, 0, 0)&lt;/code&gt;函数，在调用系统调用的入口处停止&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;获取系统调用参数信息&lt;/strong&gt;：这里使用到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace(PTRACE_GETREGS, pid, 0, &amp;amp;regs)&lt;/code&gt;函数，获取当前tracee进程中寄存器的值&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;执行系统调用并等待返回后停止&lt;/strong&gt;：这里再次使用到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace(PTRACE_SYSCALL, pid, 0, 0)&lt;/code&gt;函数，表示恢复tracee进程的系统调用执行，并等系统调用执行完毕返回后停止执行tracee进程&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;获取系统调用执行返回结果&lt;/strong&gt;：这里再次使用到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace(PTRACE_GETREGS, pid, 0, &amp;amp;regs)&lt;/code&gt;函数，获取系统调用的返回结果&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;拦截并模拟系统调用&quot;&gt;拦截并模拟系统调用&lt;/h2&gt;

&lt;p&gt;从上面的例子可知，通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt;可以实现系统调用的拦截和恢复系统调用继续执行，如果要想实现系统调用的模拟，就需要在tracer跟踪器代码中增加一些关于系统调用的模拟操作，避免进入到内核中执行真实的系统调用。&lt;/p&gt;

&lt;p&gt;一个简单地拦截过滤系统调用的例子：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Enter next system call */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_regs_struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_GETREGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Is this system call permitted? */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_syscall_blocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blocked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orig_rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set to invalid syscall&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SETREGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Run system call and stop on exit */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SYSCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* errno = EPERM */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Operation not permitted&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRACE_SETREGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;系统调用拦截并模拟的操作可以通过下面的方法实现：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt;拦截系统调用&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_GETREGS&lt;/code&gt;获取实际调用的系统调用信息（包括系统调用号和参数）&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SETREGS&lt;/code&gt;选项，修改系统调用的调用号信息，将其设置为一个非法的系统调用号，&lt;/li&gt;
  &lt;li&gt;最后，通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt;重新恢复系统系统调用执行，触发异常；在tracer代码中处理上述的异常，在用户空间代码中模拟系统调用的执行，返回模拟执行的结果&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是，上述这种拦截并模拟系统调用的方式非常低效，总共需要4次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;系统调用（也就触发了4次用户态和内核态的上下文切换）。&lt;/p&gt;

&lt;p&gt;从2005年之后，Linux内核中引入了一个新的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;的request类型：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSEMU&lt;/code&gt;来模拟系统调用，减少模拟系统调用带来的额外内核上下文开销。基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSEMU&lt;/code&gt;实现系统调用拦截和模拟的步骤如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSEMU&lt;/code&gt;在系统调用入口处拦截系统调用&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_GETREGS&lt;/code&gt;获取实际调用的系统调用信息（包括系统调用号和参数）&lt;/li&gt;
  &lt;li&gt;然后由tracer来模拟系统调用的实现，返回模拟的系统调用执行结果&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一个简单基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSEMU&lt;/code&gt;实现系统调用和拦截的关键代码逻辑，如下所示：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    ptrace&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;PTRACE_SYSEMU, pid, 0, 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    waitpid&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pid, 0, 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    struct user_regs_struct regs&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ptrace&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;PTRACE_GETREGS, pid, 0, &amp;amp;regs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    switch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;regs.orig_rax&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; OS_read:
            /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ... &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; OS_write:
            /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ... &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; OS_open:
            /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ... &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; OS_exit:
            /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ... &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/

        /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ... and so on ... &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以，相比于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt;，基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PTRACE_SYSEMU&lt;/code&gt;实现系统调用拦截和模拟的方法，&lt;strong&gt;减少了2个ptrace系统调用&lt;/strong&gt;，整体系统调用模拟的性能也有所提高。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nullprogram.com/blog/2018/06/23/&quot;&gt;Intercepting and Emulating Linux System Calls with Ptrace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man2/ptrace.2.html&quot;&gt;ptrace(2) — Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Mar 2022 18:40:00 +0800</pubDate>
        <link>http://localhost:4000/linux/2022/03/28/ptrace-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%8B%A6%E6%88%AA%E5%92%8C%E6%A8%A1%E6%8B%9F.html</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2022/03/28/ptrace-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%8B%A6%E6%88%AA%E5%92%8C%E6%A8%A1%E6%8B%9F.html</guid>
        
        <category>笔记</category>
        
        <category>内核</category>
        
        <category>云原生</category>
        
        <category>ptrace</category>
        
        <category>sandbox</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>May the force be with you</title>
        <description>&lt;h1 id=&quot;may-the-force-be-with-you&quot;&gt;May the force be with you&lt;/h1&gt;

&lt;iframe src=&quot;https://www.xmind.net/embed/ckdwBg/&quot; width=&quot;750&quot; height=&quot;630&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;linux-系统编程&quot;&gt;Linux 系统编程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/LEON1741/article/details/78142269&quot;&gt;linux下的僵尸进程产生原因和解决方法（含具体代码）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/alantu2018/p/8526916.html&quot;&gt;普通线程和内核线程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/yasi_xi/article/details/9899599&quot;&gt;libc、glibc和glib的关系&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/26856&quot;&gt;我从来没有真正明白：什么是POSIX？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insujang.github.io/2018-11-27/udev-device-manager-for-the-linux-kernel-in-userspace/&quot;&gt;udev: Device Manager for the Linux Kernel in Userspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;编译--链接&quot;&gt;编译 &amp;amp; 链接&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chemiandy.lofter.com/post/1d254b22_69a16af&quot;&gt;Linux库文件搜索路径&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.meituan.com/2015/01/22/linker.html&quot;&gt;高级语言的编译：链接及装载过程介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itbilu.com/linux/management/V1vdnt9ll.html&quot;&gt;Linux升级安装GCC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itbilu.com/linux/management/NymXRUieg.html&quot;&gt;解决类似 /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21’ not found 的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;网络&quot;&gt;网络&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zqjflash/tcp-ip-protocol&quot;&gt;TCP（传输控制协议）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://e-mailky.github.io/2017-02-14-netlink-user-kernel1&quot;&gt;用户空间和内核空间通讯–netlink&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stephanietang.github.io/2020/04/19/how-https-works/&quot;&gt;HTTPS的工作原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;操作系统&quot;&gt;操作系统&lt;/h2&gt;

&lt;h3 id=&quot;操作系统发行版&quot;&gt;操作系统发行版&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tlanyan.me/yum-repos-summary/&quot;&gt;常用yum源整理&lt;/a&gt;：介绍了官方yum源和第三方yum源的区别和常用的yum源镜像地址&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5d0ef5376fb9a07ef63fe74e&quot;&gt;CentOS 7上升级/安装gcc&lt;/a&gt;：这篇文章介绍了如何通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scl&lt;/code&gt;工具更新gcc版本&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wswind/p/10729610.html&quot;&gt;CentOS 使用第三方软件源 安装最新版本软件 省去编译烦恼 IUS SCL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.cn/article-8509-1.html&quot;&gt;CentOS 上最佳的第三方仓库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;计算机体系结构&quot;&gt;计算机体系结构&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/23474438&quot;&gt;处理器架构、指令集和汇编语言，三者有何关系？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;虚拟化&quot;&gt;虚拟化&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://smilejay.com/2012/11/how-to-mount-a-qcow2-image/&quot;&gt;如何挂载QCOW2格式的镜像文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/hugetong/p/5903105.html&quot;&gt;挂载qcow2文件，qcow2里边还有个lvm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.cn/article/wcSmEKasstv*AdEPZE61&quot;&gt;基于 Kata Containers 与 iSulad 的云容器实践解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;云原生&quot;&gt;云原生&lt;/h2&gt;

&lt;h3 id=&quot;serverless&quot;&gt;Serverless&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://liubin.org/blog/2018/05/04/the-world-is-full-managed/&quot;&gt;世界是 container 的，也是 microservice 的，但最终还是 serverless 的&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;k8s&quot;&gt;k8s&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://note.sycki.com/articles/kubernetes/k8s-code-kubelet&quot;&gt;k8s源码分析-kubelet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/1919fb8a48ea&quot;&gt;Kubelet 对CNI的实现&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000019956620&quot;&gt;彻底理解kubernetes CNI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;容器&quot;&gt;容器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.meituan.com/2020/03/12/cloud-native-security.html&quot;&gt;云原生之容器安全实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016137548&quot;&gt;Dockerfile多阶段构建原理和使用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;安全容器&quot;&gt;安全容器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.cn/article/wcSmEKasstv*AdEPZE61&quot;&gt;基于 Kata Containers 与 iSulad 的云容器实践解析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/news/604184&quot;&gt;Kata Containers 创始人带你入门安全容器技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;利器&quot;&gt;利器&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/hongdada/p/9776547.html&quot;&gt;Typora快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vscode&quot;&gt;vscode&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&quot;&gt;vscode快捷键速记表&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/37623310/answer/150017561&quot;&gt;VS Code有哪些常用的快捷键？ - 唐伟的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000017949680&quot;&gt;宇宙最强vscode教程（基础篇）&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;vscode常用快捷键&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F12&lt;/code&gt;：跳转到定义处&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift + F12&lt;/code&gt;：跳转到引用该函数的地方&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt + &amp;lt;左/右方向键&amp;gt;&lt;/code&gt;：跳转到上一次光标处/下一次光标处&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + P&lt;/code&gt;窗口可以执行的操作：
        &lt;ul&gt;
          &lt;li&gt;直接输入文件名，快速打开文件&lt;/li&gt;
          &lt;li&gt;? 列出当前可执行的动作&lt;/li&gt;
          &lt;li&gt;! 显示Errors或Warnings，也可以Ctrl+Shift+M&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;跳转到行数，也可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+G&lt;/code&gt;直接进入&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;跳转到symbol（搜索变量或者函数），也可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+O&lt;/code&gt;直接进入&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@:&lt;/code&gt;根据分类跳转symbol，查找属性或函数，也可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+O&lt;/code&gt;后输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;进入&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; 根据名字查找symbol，也可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+T&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + K , Ctrl + S&lt;/code&gt;：打开VScode绑定的快捷键列表，可以搜索快捷键&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;开发工具&quot;&gt;开发工具&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zhangpower1993/article/details/52184581&quot;&gt;vim插件管理器：Vundle的介绍及安装（很全）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;json生成和解析命令行工具-jq&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.b1uew01f.net/learnnotes/linux/304.html&quot;&gt;jq: shell 脚本中JSON创建、解析工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.lujun9972.win/blog/2018/03/01/使用jq组装json/index.html&quot;&gt;使用jq组装JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;编译原理&quot;&gt;编译原理&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.cn/article/t184YFyd_VMEv0dIhpRd&quot;&gt;不想当“螺丝钉”？先搞定编译原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.cn/article/laTWH0UM4ZWWiTSAmrlR&quot;&gt;2019 年最新编译原理学习全攻略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-内核&quot;&gt;Linux 内核&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wowotech.net/device_model/uevent.html&quot;&gt;Linux设备模型(3)_Uevent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/10653d83909d&quot;&gt;Linux 设备模型之 Uevent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;设备管理&quot;&gt;设备管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-cn-udev/index.html&quot;&gt;使用 udev 高效、动态地管理 Linux 设备文件&lt;/a&gt;：设备文件创建/udev&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1169495&quot;&gt;udev和devfs的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/longwang155069/article/details/52757592&quot;&gt;devtmpfs文件系统创建设备节点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;编程语言&quot;&gt;编程语言&lt;/h2&gt;

&lt;h3 id=&quot;rust&quot;&gt;Rust&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/31038569/answer/915365379&quot;&gt;如何开始学习 Rust 语言? - 蒋古申的回答 - 知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rcore-os/zCore&quot;&gt;zCore-一个用Rust写的RISV的小型操作系统&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/emosenkis/esp-rs/issues/10&quot;&gt;解决rust nightly编译工具链问题-error: toolchain ‘nightly-x86_64-unknown-linux-gnu’ is not installed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rust语言的开发迭代发布流程-&lt;a href=&quot;https://kaisery.github.io/trpl-zh-cn/appendix-07-nightly-rust.html#%E9%99%84%E5%BD%95-grust-%E6%98%AF%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%8E-nightly-rust&quot;&gt;附录-grust-是如何开发的与-nightly-rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;golang&quot;&gt;Golang&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42848636/difference-between-golang-org-packages-and-the-standard-library&quot;&gt;Difference between golang.org packages and the standard library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bookstack.cn/books/qcrao-Go-Questions&quot;&gt;Go 语言问题集(Go Questions)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webassembly&quot;&gt;WebAssembly&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/docs/book/introduction.html#rust--and-webassembly-&quot;&gt;Rust And WebAssembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/WebAssembly/Understanding_the_text_format&quot;&gt;理解WebAssembly文本格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustcc.cn/article?id=b8a26e3a-16f2-4657-acdb-dd64b3a6773c&quot;&gt;【Rust每周一知】Rust, wasm, wasi 试玩儿&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rustcc/RustPrimer/blob/master/install/rustup.md&quot;&gt;Rust 版本管理工具: rustup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;调试&quot;&gt;调试&lt;/h2&gt;

&lt;h3 id=&quot;gdb调试方法&quot;&gt;gdb调试方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://izualzhy.cn/why-the-code-stack-is-overflow&quot;&gt;追core笔记之五：如何查看一个corrupt stack的core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/chengliangsheng/p/3597010.html&quot;&gt;Linux中用gdb 查看代码堆栈的信息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/selfboot/CS_Offer/blob/master/C%2B%2B/GDB_Debug.md&quot;&gt;使用 GDB 调试程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://draveness.me/golang/&quot;&gt;Go 语言设计与实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debuginfo包&quot;&gt;debuginfo包&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;[https://github.com/kulong0105/kulong0105.github.io/blob/master/documents/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3debuginfo.pdf](https://github.com/kulong0105/kulong0105.github.io/blob/master/documents/深入理解debuginfo.pdf)&quot;&gt;深入理解debuginfo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;软件开发流程&quot;&gt;软件开发流程&lt;/h2&gt;

&lt;h3 id=&quot;版本管理&quot;&gt;版本管理&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://semver.org/lang/zh-CN/&quot;&gt;语义化版本 2.0.0&lt;/a&gt;：语义化版本管理的方式，版本格式为：主版本号.次版本号.修订号&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;主版本号：当你做了不兼容的 API 修改，&lt;/li&gt;
  &lt;li&gt;次版本号：当你做了向下兼容的功能性新增，&lt;/li&gt;
  &lt;li&gt;修订号：当你做了向下兼容的问题修正。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;问题定位&quot;&gt;问题定位&lt;/h2&gt;

&lt;h3 id=&quot;内核&quot;&gt;内核&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xry111/xry111.github.io/blob/master/FixWrongIRQRouting.md&quot;&gt;错误的 IRQ 中断路由及修复&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;优质博客网站&quot;&gt;优质博客网站&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chenweixiang.github.io/&quot;&gt;Chenweixiang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insujang.github.io/&quot;&gt;insujang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 10 Jul 2020 07:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%AD%A6%E4%B9%A0&%E6%95%88%E7%8E%87/2020/07/10/May-the-force-be-with-you.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%AD%A6%E4%B9%A0&%E6%95%88%E7%8E%87/2020/07/10/May-the-force-be-with-you.html</guid>
        
        <category>Linux</category>
        
        <category>笔记</category>
        
        <category>内核</category>
        
        <category>云原生</category>
        
        
        <category>学习&amp;效率</category>
        
      </item>
    
      <item>
        <title>杭州周边露营指南</title>
        <description>&lt;h2 id=&quot;桐庐十字峡&quot;&gt;桐庐十字峡&lt;/h2&gt;

&lt;h3 id=&quot;地点&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;桐庐县十字峡凤川镇十字峡谷&lt;/p&gt;

&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;车辆无法直达，露营地离停车的地方较远&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;分享&quot;&gt;分享&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.19lou.com/forum-32-thread-6441557736456447-1-1.html&quot;&gt;桐庐十字峡露营&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安吉赋石水库&quot;&gt;安吉赋石水库&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/XHS_1587230479364c06c5dee-73ef-306a-aac6-ecec68103b75.jpg&quot; alt=&quot;XHS_1587230479364c06c5dee-73ef-306a-aac6-ecec68103b75&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地点-1&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;安吉县赋石水库小杭坑&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/Screenshot_20200419_004228_com.autonavi.minimap.jpg&quot; alt=&quot;Screenshot_20200419_004228_com.autonavi.minimap&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;简介-1&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;位于水库边缘，有个大草坪，还有一片杉树，可以挂个吊床，美滋滋&lt;/li&gt;
  &lt;li&gt;上次去的时候看到有人在钓鱼，但是问了之后说是可以钓钓小鱼，如果钓大鱼的话，会被罚款&lt;/li&gt;
  &lt;li&gt;对面的山上就是一大片竹林，夏天的时候远远望去，一片翠绿，心情非常舒畅&lt;/li&gt;
  &lt;li&gt;上面的农家乐有水和厕所，好像是每人收费20元吧&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安吉井空里&quot;&gt;安吉井空里&lt;/h2&gt;

&lt;h3 id=&quot;地点-2&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;安吉井空里双水线/九亩村&lt;/p&gt;

&lt;h3 id=&quot;简介-2&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;周边有农家乐，上厕所，想尝尝农家菜还是很方便&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以溯溪，最好穿溯溪鞋&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安吉天子岗水库&quot;&gt;安吉天子岗水库&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/XHS_15872304860182d043491-9eb6-375e-ab42-ccbdd1a05f8a.jpg&quot; alt=&quot;XHS_15872304860182d043491-9eb6-375e-ab42-ccbdd1a05f8a&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地点-3&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;安吉天子岗水库松树林&lt;/p&gt;

&lt;p&gt;收费：每人50元&lt;/p&gt;

&lt;h3 id=&quot;简介-3&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有简易厕所和自来水，带孩子和家人来比较方便&lt;/li&gt;
  &lt;li&gt;有松树，有水库，很有森林的气息&lt;/li&gt;
  &lt;li&gt;收费每人50元&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;分享-1&quot;&gt;分享&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://club.autohome.com.cn/bbs/thread/f35e04ad1d0bebc3/85684821-1.html&quot;&gt;安吉天子岗水库松树林&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xiaohongshu.com/discovery/item/5e8c69ec0000000001006658&quot;&gt;安吉天子岗露营记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;莫干山大洋里爱路客星空营地&quot;&gt;莫干山大洋里爱路客星空营地&lt;/h2&gt;

&lt;h3 id=&quot;地点-4&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;导航至&lt;strong&gt;莫干山大洋里露营基地&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;简介-4&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可以看日出，晚上可以看星星&lt;/li&gt;
  &lt;li&gt;有水有电，也有厕所，配套比较完善&lt;/li&gt;
  &lt;li&gt;可能露营地比较成熟了，也需要收费，所以喜欢那种完全原生态，不那么嘈杂环境的人可能不是很适合&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;分享-2&quot;&gt;分享&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av36485783/&quot;&gt;深秋莫干山露营指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mafengwo.cn/wenda/detail-12447088.html&quot;&gt; 莫干山可以露营吗？哪里露营呢？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安吉日回山赋石水库&quot;&gt;安吉日回山（赋石水库）&lt;/h2&gt;

&lt;h3 id=&quot;地点-5&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;安吉日回山（新桥头附近）&lt;/p&gt;

&lt;p&gt;和小杭坑离得很近，都是在赋石水库的边上&lt;/p&gt;

&lt;h2 id=&quot;桐庐新安坞&quot;&gt;桐庐新安坞&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/XHS_1587231676517569abe16-4eab-3a22-9559-40b6ba5cfcb9.jpg&quot; alt=&quot;XHS_1587231676517569abe16-4eab-3a22-9559-40b6ba5cfcb9&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地点-6&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;桐庐新安坞（问下当地人，在最山顶上）&lt;/p&gt;

&lt;h2 id=&quot;桐庐桐洲岛露营基地&quot;&gt;桐庐桐洲岛露营基地&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/1812071056-wsw.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地点-7&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;桐庐桐洲岛亚联飞行基地&lt;/p&gt;

&lt;h3 id=&quot;简介-5&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;桐洲岛是富春江上的一个江心小岛，距离杭州的车程差不多40分钟左右就到了，非常方便&lt;/li&gt;
  &lt;li&gt;岛的北边是村庄，南边有片树林，夏天的时候去过一次，雨后的样子超级美&lt;/li&gt;
  &lt;li&gt;靠近江边有时还可以看到江上有渔人在打渔，江边还有很多小朋友挽着脚在找螃蟹&lt;/li&gt;
  &lt;li&gt;亚联飞行基地那边有块大草坪，但是好像只在下午结束飞行之后才可以在草坪上露营，并且露营需要收费&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;分享-3&quot;&gt;分享&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thetigerhood.com/north-and-south-camping-party/&quot;&gt;杭州野餐会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;临安西天目山露营&quot;&gt;临安西天目山露营&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/XHS_158723258870258c6c0ba-b220-38e2-ad89-a180c31653e9.jpg&quot; alt=&quot;XHS_158723258870258c6c0ba-b220-38e2-ad89-a180c31653e9&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地点-8&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;杭州往藻溪方向下高速右转，往交口存方向一致到西天目风景区内（景区大门口开上山）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/Screenshot_20200419_015605_com.autonavi.minimap.jpg&quot; alt=&quot;Screenshot_20200419_015605_com.autonavi.minimap&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;仙居淡竹&quot;&gt;仙居淡竹&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/XHS_1587232999844174ec613-9e96-3ff2-880f-8f2e68731cec.jpg&quot; alt=&quot;XHS_1587232999844174ec613-9e96-3ff2-880f-8f2e68731cec&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地点-9&quot;&gt;地点&lt;/h3&gt;

&lt;p&gt;仙居淡竹&lt;/p&gt;

&lt;h2 id=&quot;千岛湖&quot;&gt;千岛湖&lt;/h2&gt;

&lt;p&gt;待发掘中。。。。。。&lt;/p&gt;

&lt;h2 id=&quot;装备&quot;&gt;装备&lt;/h2&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;帐篷&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;防潮垫&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;脚踩气垫打气器&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;柯密特椅&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;户外折叠椅&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;蛋卷桌&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;炉子&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;三脚架&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;吊锅&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;茶壶&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;煎锅&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;烧烤架&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;折叠储物箱&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;户外小推车&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;汽灯&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;G2气罐&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;马灯&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;LED星星灯&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;帐篷灯&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;户外灯架&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;工具箱：锤子等&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;储水袋&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;焚火炉&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;便携调味瓶套装&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;手冲咖啡漏斗&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;手冲壶&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;保温箱&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;野餐垫&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;吊床&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;锯子&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;餐具&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;睡袋&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;插花瓶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;装备更新中。。。。。。&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2020 07:00:32 +0800</pubDate>
        <link>http://localhost:4000/%E6%88%B7%E5%A4%96/2020/04/24/%E9%9C%B2%E8%90%A5%E6%8C%87%E5%8D%97.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%88%B7%E5%A4%96/2020/04/24/%E9%9C%B2%E8%90%A5%E6%8C%87%E5%8D%97.html</guid>
        
        <category>户外</category>
        
        <category>露营</category>
        
        <category>camp</category>
        
        
        <category>户外</category>
        
      </item>
    
      <item>
        <title>Kubernetes 集群搭建</title>
        <description>&lt;h2 id=&quot;目标&quot;&gt;目标&lt;/h2&gt;
&lt;p&gt;采用 kubernetes.io 官方推荐的 kubeadm 工具安装 kubernetes 集群。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker版本：18.06.0-ce&lt;/li&gt;
  &lt;li&gt;Kubernetes版本：v1.18.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;集群规划&quot;&gt;集群规划&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;角色&lt;/th&gt;
      &lt;th&gt;主机名&lt;/th&gt;
      &lt;th&gt;IP地址&lt;/th&gt;
      &lt;th&gt;系统&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Master&lt;/td&gt;
      &lt;td&gt;flyflypeng-VirtualBox-k8s-master&lt;/td&gt;
      &lt;td&gt;192.168.5.154&lt;/td&gt;
      &lt;td&gt;Ubuntu 16.04.5 LTS (Xenial Xerus)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Woker&lt;/td&gt;
      &lt;td&gt;flyflypeng-desktop-k8s-worker&lt;/td&gt;
      &lt;td&gt;192.168.5.8&lt;/td&gt;
      &lt;td&gt;Ubuntu 18.04.1 LTS (Bionic Beaver)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;环境配置自检&quot;&gt;环境配置自检&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;硬件环境要求&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;One or more machines running Ubuntu 16.04+, CentOS 7 or HypriotOS v1.0.1+&lt;/li&gt;
      &lt;li&gt;1GB or more of RAM per machine (any less will leave little room for your apps)&lt;/li&gt;
      &lt;li&gt;Full network connectivity between all machines in the cluster (public or private network is fine)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;关闭系统中的内存 swap 功能&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # 查看系统是否启用了 swap
  cat /proc/swaps
  Filename				Type		Size	Used	Priority
  /dev/sda5                               partition	2095100	0	-1
    
  # 禁用 swap 功能
  swapoff -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;关闭防火墙&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  systemctl stop firewalld
  systemctl disable firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;关闭selinux&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  setenforce 0
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;&lt;/span&gt; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;修改 /etc/sysctl.conf&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# 如果有配置，则修改&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g&quot;&lt;/span&gt;  /etc/sysctl.conf
  &lt;span class=&quot;c&quot;&gt;# 可能没有，追加&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.ipv4.ip_forward = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.bridge.bridge-nf-call-iptables = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.ipv6.conf.all.disable_ipv6 = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.ipv6.conf.default.disable_ipv6 = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.ipv6.conf.lo.disable_ipv6 = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.ipv6.conf.all.forwarding = 1&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
  &lt;span class=&quot;c&quot;&gt;# 执行命令以应用&lt;/span&gt;
  sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装docker以及kubeletkubeadmkubectl&quot;&gt;安装docker以及kubelet,kubeadm,kubectl&lt;/h2&gt;

&lt;h3 id=&quot;docker安装&quot;&gt;docker安装&lt;/h3&gt;

&lt;p&gt;Docker的安装方法详见笔记：《Docker 安装配置》&lt;/p&gt;

&lt;p&gt;docker 版本信息：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-desktop-k8s-worker:/home/flyflypeng/Code/scripts# docker version
Client:
 Version:           18.06.0-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        0ffa825
 Built:             Wed Jul 18 19:09:54 2018
 OS/Arch:           linux/amd64
 Experimental:      &lt;span class=&quot;nb&quot;&gt;false

&lt;/span&gt;Server:
 Engine:
  Version:          18.06.0-ce
  API version:      1.38 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum version 1.12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Go version:       go1.10.3
  Git commit:       0ffa825
  Built:            Wed Jul 18 19:07:56 2018
  OS/Arch:          linux/amd64
  Experimental:     &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kubeadm-kubelet-and-kubectl安装&quot;&gt;kubeadm, kubelet and kubectl安装&lt;/h3&gt;

&lt;p&gt;参考官方文档：&lt;a href=&quot;https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&quot;&gt;安装 kubeadm&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装kubeadm, kubelet and kubectl&lt;/span&gt;
apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; apt-transport-https curl
curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://packages.cloud.google.com/apt/doc/apt-key.gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;apt-get update
apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kubectl命令自动补全设置&quot;&gt;kubectl命令自动补全设置&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/share/bash-completion/bash_completion
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kubectl completion bash&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;source &amp;lt;(kubectl completion bash)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;k8s集群配置&quot;&gt;k8s集群配置&lt;/h2&gt;

&lt;h3 id=&quot;解决k8s镜像被墙问题&quot;&gt;解决k8s镜像被墙问题&lt;/h3&gt;

&lt;p&gt;由于官方镜像地址被墙，所以我们需要首先获取所需镜像以及它们的版本。然后从国内镜像站获取。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm config images list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取镜像列表后可以通过下面的脚本从dockerhub上获取镜像并重命名：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash

images=(kube-apiserver:v1.18.0 \
	kube-controller-manager:v1.18.0 \
	kube-scheduler:v1.18.0 \
	kube-proxy:v1.18.0 \
	pause:3.2 \
	etcd:3.4.3-0 \
	coredns:1.6.7)

for imageName in ${images[@]} ; do
    docker pull aiotceo/$imageName
    docker tag aiotceo/$imageName k8s.gcr.io/$imageName
    docker rmi aiotceo/$imageName
done
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下载 k8s 所需的各个组件的镜像如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-VirtualBox-k8s-master:/home/flyflypeng/Code/scripts# docker images
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
k8s.gcr.io/kube-proxy                v1.18.0             43940c34f24f        3 days ago          117MB
k8s.gcr.io/kube-controller-manager   v1.18.0             d3e55153f52f        3 days ago          162MB
k8s.gcr.io/kube-apiserver            v1.18.0             74060cea7f70        3 days ago          173MB
k8s.gcr.io/kube-scheduler            v1.18.0             a31f78c7c8ce        3 days ago          95.3MB
k8s.gcr.io/pause                     3.2                 80d28bedfe5d        6 weeks ago         683kB
k8s.gcr.io/coredns                   1.6.7               67da37a9a360        8 weeks ago         43.8MB
k8s.gcr.io/etcd                      3.4.3-0             303ce5db0e90        5 months ago        288MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;master-node配置&quot;&gt;Master Node配置&lt;/h3&gt;

&lt;h4 id=&quot;kubeadm-init初始化环境&quot;&gt;kubeadm init初始化环境&lt;/h4&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm init&lt;/code&gt;命令来初始化Master节点：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm init &lt;span class=&quot;nt&quot;&gt;--pod-network-cidr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.0/16 &lt;span class=&quot;nt&quot;&gt;--apiserver-advertise-address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.5.154
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在实际的部署当中需要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--apiserver-advertise-address&lt;/code&gt; 参数后面的值设置为当前主机的ip地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--apiserver-advertise-address&lt;/code&gt;：API 服务器所公布的其正在监听的 IP 地址。如果未设置，则使用默认网络接口。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pod-network-cidr&lt;/code&gt;：指明 pod 网络可以使用的 IP 地址段。如果设置了这个参数，控制平面将会为每一个节点自动分配 CIDRs。如果要配置calico网络插件，这个值一定要设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.0.0/16&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;初始化成功之后的输出信息如下所示：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-VirtualBox-k8s-master:/home/flyflypeng/Code/scripts# kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.5.154
W0329 02:35:23.887370   13950 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
[init] Using Kubernetes version: v1.18.0
[preflight] Running pre-flight checks
	[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;
[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;
[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;
[certs] Generating &quot;ca&quot; certificate and key
[certs] Generating &quot;apiserver&quot; certificate and key
[certs] apiserver serving cert is signed for DNS names [flyflypeng-virtualbox-k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.5.154]
[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key
[certs] Generating &quot;front-proxy-ca&quot; certificate and key
[certs] Generating &quot;front-proxy-client&quot; certificate and key
[certs] Generating &quot;etcd/ca&quot; certificate and key
[certs] Generating &quot;etcd/server&quot; certificate and key
[certs] etcd/server serving cert is signed for DNS names [flyflypeng-virtualbox-k8s-master localhost] and IPs [192.168.5.154 127.0.0.1 ::1]
[certs] Generating &quot;etcd/peer&quot; certificate and key
[certs] etcd/peer serving cert is signed for DNS names [flyflypeng-virtualbox-k8s-master localhost] and IPs [192.168.5.154 127.0.0.1 ::1]
[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key
[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key
[certs] Generating &quot;sa&quot; key and public key
[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;
[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file
[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file
[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file
[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file
[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;
[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;
[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;
W0329 02:35:28.725001   13950 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;
[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;
W0329 02:35:28.726217   13950 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;
[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s
[apiclient] All control plane components are healthy after 28.508549 seconds
[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace
[kubelet] Creating a ConfigMap &quot;kubelet-config-1.18&quot; in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node flyflypeng-virtualbox-k8s-master as control-plane by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;
[mark-control-plane] Marking the node flyflypeng-virtualbox-k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: l09phn.zkiuy0ipc2yp6syq
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace
[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.5.154:6443 --token l09phn.zkiuy0ipc2yp6syq \
    --discovery-token-ca-cert-hash sha256:46aba676954319993945204e35e63ad7659475921820f2ca5b430c1f75e2cd7d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置授权信息&quot;&gt;配置授权信息&lt;/h4&gt;

&lt;p&gt;所需的命令在init成功后也会有提示，主要是为了保存相关的配置信息在用户目录下，这样不用每次都输入相关的认证信息。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置网络插件&quot;&gt;配置网络插件&lt;/h3&gt;

&lt;p&gt;在部署具体的应用之前，首先需要按照好集群中的 Pod 网络插件，而 Pod 网络插件的主要作用就是提供一个 Pod 之间可以通信的虚拟网络层。其中 Pod 网络插件有多种选择，这里选用 Calico 作为例子。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://docs.projectcalico.org/v3.11/manifests/calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确认calico网络插件是否配置好，只要去检查&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoreDNS Pod&lt;/code&gt;是否处于Running状态，检查的方法如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-VirtualBox-k8s-master:/home/flyflypeng/k8s# kubectl get pods &lt;span class=&quot;nt&quot;&gt;--all-namespaces&lt;/span&gt;
NAMESPACE     NAME                                                       READY   STATUS    RESTARTS   AGE
kube-system   calico-kube-controllers-5b8b769fcd-xxftq                   1/1     Running   1          11m
kube-system   calico-node-tkswj                                          1/1     Running   0          11m
kube-system   coredns-66bff467f8-cpxnv                                   1/1     Running   0          4m5s
kube-system   coredns-66bff467f8-p759z                                   1/1     Running   0          4m6s
kube-system   etcd-flyflypeng-virtualbox-k8s-master                      1/1     Running   1          9h
kube-system   kube-apiserver-flyflypeng-virtualbox-k8s-master            1/1     Running   1          9h
kube-system   kube-controller-manager-flyflypeng-virtualbox-k8s-master   1/1     Running   4          9h
kube-system   kube-proxy-tb9z4                                           1/1     Running   1          9h
kube-system   kube-scheduler-flyflypeng-virtualbox-k8s-master            1/1     Running   5          9h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决coreDNS容器无法启动问题的方法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/53075796/coredns-pods-have-crashloopbackoff-or-error-state&quot;&gt;coredns pods have CrashLoopBackOff or Error state
&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u011663005/article/details/87937800&quot;&gt;搭建Kubernetes集群踩坑日志之coreDNS 组件出现CrashLoopBackOff问题的解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;调整-master-node-执行-pod-的策略可选&quot;&gt;调整 Master Node 执行 Pod 的策略（可选）&lt;/h3&gt;

&lt;p&gt;我在前面提到过，默认情况下 Master 节点是不允许运行用户 Pod 的。而 Kubernetes 做到这一点，依靠的是 Kubernetes 的 Taint/Toleration 机制。&lt;/p&gt;

&lt;p&gt;它的原理非常简单：一旦某个节点被加上了一个 Taint，即被“打上了污点”，那么所有 Pod 就都不能在这个节点上运行，因为 Kubernetes 的 Pod 都有“洁癖”。
除非，有个别的 Pod 声明自己能“容忍”这个“污点”，即声明了 Toleration，它才可以在这个节点上运行。&lt;/p&gt;

&lt;p&gt;其中，为节点打上“污点”（Taint）的命令是：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl taint nodes &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; node-role.kubernetes.io/master-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我这里就不在Master节点上部署用户的业务容器了，所有的容器都部署在Worker节点上。&lt;/p&gt;

&lt;h3 id=&quot;worker节点配置&quot;&gt;Worker节点配置&lt;/h3&gt;

&lt;h4 id=&quot;获得-join命令参数&quot;&gt;获得 join命令参数&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在 master 节点上执行&lt;/span&gt;
root@flyflypeng-VirtualBox-k8s-master:/home/flyflypeng/k8s# kubeadm token create &lt;span class=&quot;nt&quot;&gt;--print-join-command&lt;/span&gt;
W0329 12:09:29.488896   20698 configset.go:202] WARNING: kubeadm cannot validate component configs &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;API &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kubelet.config.k8s.io kubeproxy.config.k8s.io]
kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;192.168.5.154:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 1xkojk.uuxo8th0njy75d2g     &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:cf93dfbf1a653dd82e61220c567a70c1ed725396e740277c29fb49eb966a9677
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;准备worker上的镜像&quot;&gt;准备worker上的镜像&lt;/h4&gt;

&lt;p&gt;首先worker节点上也要下载k8s相关的镜像，worker上必备镜像列表：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-desktop-k8s-worker:/home/flyflypeng/k8s# docker images
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
k8s.gcr.io/kube-proxy       v1.18.0             43940c34f24f        3 days ago          117MB
k8s.gcr.io/pause            3.2                 80d28bedfe5d        6 weeks ago         683kB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;初始化worker节点&quot;&gt;初始化Worker节点&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-desktop-k8s-worker:/home/flyflypeng# kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;192.168.5.154:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 1xkojk.uuxo8th0njy75d2g     &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:cf93dfbf1a653dd82e61220c567a70c1ed725396e740277c29fb49eb966a9677

root@flyflypeng-desktop-k8s-worker:/home/flyflypeng# kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;192.168.5.154:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 1xkojk.uuxo8th0njy75d2g     &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:cf93dfbf1a653dd82e61220c567a70c1ed725396e740277c29fb49eb966a9677
W0329 12:10:42.264742     655 join.go:346] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;preflight] Running pre-flight checks
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;preflight] Reading configuration from the cluster...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;preflight] FYI: You can look at this config file with &lt;span class=&quot;s1&quot;&gt;&apos;kubectl -n kube-system get cm kubeadm-config -oyaml&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kubelet-start] Downloading configuration &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the kubelet from the &lt;span class=&quot;s2&quot;&gt;&quot;kubelet-config-1.18&quot;&lt;/span&gt; ConfigMap &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the kube-system namespace
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kubelet-start] Writing kubelet configuration to file &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/kubelet/config.yaml&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kubelet-start] Writing kubelet environment file with flags to file &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/kubelet/kubeadm-flags.env&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kubelet-start] Starting the kubelet
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kubelet-start] Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Certificate signing request was sent to apiserver and a response was received.
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; The Kubelet was informed of the new secure connection details.

Run &lt;span class=&quot;s1&quot;&gt;&apos;kubectl get nodes&apos;&lt;/span&gt; on the control-plane to see this node &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;the cluster.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后我们在Master节点上运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get nodes&lt;/code&gt;查看Worker节点是否已经加入了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@flyflypeng-VirtualBox-k8s-master:/home/flyflypeng/k8s# kubectl get nodes &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
NAME                               STATUS   ROLES    AGE   VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
flyflypeng-desktop-k8s-worker      Ready    &amp;lt;none&amp;gt;   11m   v1.18.0   192.168.5.8     &amp;lt;none&amp;gt;        Ubuntu 18.04.1 LTS   4.15.0-88-generic   docker://18.6.0
flyflypeng-virtualbox-k8s-master   Ready    master   9h    v1.18.0   192.168.5.154   &amp;lt;none&amp;gt;        Ubuntu 16.04.5 LTS   4.15.0-36-generic   docker://18.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：如果原来已经加入 Cluster 的 Node 重启之后，需要通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm reset&lt;/code&gt; 重置当前 Node 的环境，然后重新使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm join&lt;/code&gt; 来将当前 Node 加入到 Master Node 管理。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;部署其他插件&quot;&gt;部署其他插件&lt;/h3&gt;

&lt;p&gt;由于很多官方的插件所需镜像也在 http://gcr.io 上，所以遇到这种情况，可以通过下面的方式获取：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/46341911&quot;&gt;kubernetes安装（国内环境）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;将yaml文件中镜像地址的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k8s.gcr.io&lt;/code&gt;替换成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.cn-hangzhou.aliyuncs.com/google_containers&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;在其他机器上访问集群&quot;&gt;在其他机器上访问集群&lt;/h3&gt;

&lt;p&gt;如果你想通过你的Mac来访问你搭建的集群，你可以将集群的administrator的配置文件拷贝到的你的Mac上，用法如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp root@&amp;lt;control-plane-host&amp;gt;:/etc/kubernetes/admin.conf &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
kubectl &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt; ./admin.conf get nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了避免每次都敲kubectl命令时都加上配置选项&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--kubeconfig&lt;/code&gt;，我们可以简单地在shell配置环境中的加个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# kubectl --kubeconfig alias&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kubectl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;kubectl --kubeconfig /Users/woshijpf/k8s/admin.conf&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;清理集群&quot;&gt;清理集群&lt;/h3&gt;

&lt;p&gt;我现在还没这么干过，但是记录一下清理的方法，万一哪天就用到了呢。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down&quot;&gt;k8s Clean up&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用k8s部署web应用&quot;&gt;使用k8s部署Web应用&lt;/h2&gt;

&lt;p&gt;到现在为止，我们已经把k8s集群搭建完了，现在我们可以部署一个Node应用来验证我们搭建的k8s集群是否可以正常工作。&lt;/p&gt;

&lt;p&gt;这部分我从网站上找了一个例子，部署一个待办事项的Web App，大家直接参考这篇文章吧：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/39680577&quot;&gt;入门系列之Kubernetes部署&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;部署完成之后，查看Web App服务在Worker节点暴露出来的端口号：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get services                                                                                                                                  
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          AGE
db           ClusterIP   10.106.46.173   &amp;lt;none&amp;gt;        27017/TCP        50m
kubernetes   ClusterIP   10.96.0.1       &amp;lt;none&amp;gt;        443/TCP          20h
web          NodePort    10.101.158.14   &amp;lt;none&amp;gt;        3000:32678/TCP   36m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过浏览器访问Worker节点上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://192.168.5.8:32678&lt;/code&gt;地址：
&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/container-web-app.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是我kubenetes v1.18.0版本上验证过的yaml文件：&lt;/p&gt;

&lt;p&gt;db-pod.yaml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;27017&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo-storage&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/db&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo-storage&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;db-service.yaml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;todoapp&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;27017&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;27017&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;web-pod.yaml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;todoapp&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sammy/todo&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;web-service.yaml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;todoapp&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;web-rs.yaml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicaSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;todoapp&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;todoapp&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;todoapp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sammy/todo&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果不想将镜像上传到dockerhub上，直接在worker节点上使用编译出来的镜像，则需要在部署web app的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web-pod.yaml&lt;/code&gt;文件中添加上镜像拉去的策略&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;副本集(ReplicaSet)的测试过程中，要将yaml文件中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apiVersion&lt;/code&gt;的值从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extensions/v1beta1&lt;/code&gt;替换成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/v1&lt;/code&gt;，因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extensions/v1beta1&lt;/code&gt;已经被弃用了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&quot;k8s镜像拉取策略配置&quot;&gt;k8s镜像拉取策略配置&lt;/h3&gt;

&lt;p&gt;k8s的部署配置文件中经常看到有imagePullPolicy属性，这个属性是描述镜像的拉取策略：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Always 总是拉取镜像&lt;/li&gt;
  &lt;li&gt;IfNotPresent 本地有则使用本地镜像,不拉取&lt;/li&gt;
  &lt;li&gt;Never 只使用本地镜像，从不拉取，即使本地没有&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果省略imagePullPolicy，镜像tag为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:latest&lt;/code&gt;，策略为always。&lt;/p&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kuboard.cn/install/install-k8s.html#%E6%96%87%E6%A1%A3%E7%89%B9%E7%82%B9&quot;&gt;使用kubeadm安装kubernetes_v1.17.x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/&quot;&gt;kubeadm init&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 29 Mar 2020 04:00:31 +0800</pubDate>
        <link>http://localhost:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/2020/03/29/Kubernetes%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/2020/03/29/Kubernetes%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
        
        <category>kubernetes</category>
        
        <category>k8s</category>
        
        <category>cloudnative</category>
        
        
        <category>云原生</category>
        
      </item>
    
      <item>
        <title>Mac 开发环境配置</title>
        <description>&lt;h2 id=&quot;typora&quot;&gt;Typora&lt;/h2&gt;

&lt;p&gt;我先放张我在Mac中我用Typora写这篇文章时的界面吧，你们说香不香吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/image-20200411000439442.png&quot; alt=&quot;image-20200411000439442&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typora绝对是我这几年中遇到的最好用，最好看，最喜欢的一款软件，没有之一。&lt;/p&gt;

&lt;p&gt;虽然Typora还没有发布正式的release版本，但是现在它一直在不断迭代更新，修复一些问题和补齐功能。&lt;/p&gt;

&lt;p&gt;自从6年前入了Markdown的坑，我的笔记文档，博客文章基本都是用Markdown写的，期间也是尝试过各种Markdown软件，玩过在线网页版的Cmd Markdown，也使用过套了一层Electron的蚂蚁笔记，印象笔记中最新内置的Markdown编辑器我也体验过，但就是觉得他们要么在线写笔记不方便，要么就是渲染出来的样式很丑，要么就是笔记同步功能要收费。直到遇到了Typora，我终于找到了最钟意的Markdown软件，满足了我挑剔的要求，我也是各种安利推荐给我身边的朋友和同事。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;简洁美观&lt;/li&gt;
  &lt;li&gt;所见即所得模式&lt;/li&gt;
  &lt;li&gt;支持自定义主题，也可从主题商店下载喜欢的主题&lt;/li&gt;
  &lt;li&gt;富文本自动转换成Markdown格式功能&lt;/li&gt;
  &lt;li&gt;搜索高亮功能&lt;/li&gt;
  &lt;li&gt;目录层级管理功能&lt;/li&gt;
  &lt;li&gt;大纲显示功能&lt;/li&gt;
  &lt;li&gt;图床功能，支持常用图床和自定义图床配置&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mac-修改设置环境变量&quot;&gt;Mac 修改设置环境变量&lt;/h2&gt;
&lt;p&gt;Mac 中修改环境变量的方法和 Linux 中修改环境变量的方法类似，可以修改的文件主要分为两类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;：一般在这个文件中设置用户级的环境变量&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt;：一般在这个文件中添加系统级环境变量&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;：如果你的shell环境使用的是zsh的话，你可以在这个文件中设置环境变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;添加环境变量的方式就是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt; 关键字来进行添加。&lt;/p&gt;

&lt;h2 id=&quot;iterm2-配置&quot;&gt;iTerm2 配置&lt;/h2&gt;

&lt;h3 id=&quot;主题配色&quot;&gt;主题配色&lt;/h3&gt;
&lt;p&gt;你可以根据你的喜好来选择终端主题颜色的配色方案。&lt;/p&gt;

&lt;p&gt;可以从&lt;a href=&quot;https://github.com/mbadolato/iTerm2-Color-Schemes&quot;&gt;mbadolato/iTerm2-Color-Schemes&lt;/a&gt;仓库下载iTerm2的主题配色。&lt;/p&gt;

&lt;p&gt;我选择的是==Cobalt Neon==主题，个人觉得非常不错。&lt;/p&gt;

&lt;p&gt;配置方法：
&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/import_color_schemes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;添加背景图片&quot;&gt;添加背景图片&lt;/h3&gt;

&lt;p&gt;更换背景图片方式：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iTerm2 -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; Window -&amp;gt; BackGround Image&lt;/code&gt;勾选图片即可。&lt;/p&gt;

&lt;p&gt;非常好看的一张背景图，背景图片取自微软Surface Studio的4K壁纸(将近12MB大小)，非常漂亮，需要的可以自取&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;p&gt;链接: https://pan.baidu.com/s/17zGm…
提取码: hg67&lt;/p&gt;

&lt;h3 id=&quot;快捷键&quot;&gt;快捷键&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preferences -&amp;gt; Keys -&amp;gt; Hotkey -&amp;gt; Show/hide iTerm2 with a system wide hotkey&lt;/code&gt;设置快捷键 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command + option + i&lt;/code&gt; 快速显示和隐藏 iTerm。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;常用快捷键列表&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;shortcut key&lt;/th&gt;
          &lt;th&gt;description&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;⌘ + t&lt;/td&gt;
          &lt;td&gt;新建标签页&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;⌘ + n&lt;/td&gt;
          &lt;td&gt;新建窗口&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;⌘ + 数字&lt;/td&gt;
          &lt;td&gt;切换标签页&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;⌘ + enter&lt;/td&gt;
          &lt;td&gt;切换全屏&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;⌘ + d&lt;/td&gt;
          &lt;td&gt;左右分屏&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;⇧⌘ + d&lt;/td&gt;
          &lt;td&gt;上下分屏&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;⌘ + ;&lt;/td&gt;
          &lt;td&gt;自动补全历史记录&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;记录命令行操作日志&quot;&gt;记录命令行操作日志&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session &amp;gt; Log &amp;gt; Log to File&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;zsh&quot;&gt;zsh&lt;/h2&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://ohmyz.sh/ß&quot;&gt;zsh&lt;/a&gt;
使用教程链接：&lt;a href=&quot;http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html&quot;&gt;oh-my-zsh配置你的zsh提高shell逼格终极选择&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;zsh的主题文件存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.oh-my-zsh/thees&lt;/code&gt; 目录下，你可以自己从github上淘到一些非常酷炫的的主题配置，然后下载存放到该目录下。&lt;/p&gt;

&lt;p&gt;推荐一个带PowerBar的非常骚的一个主题配置：&lt;a href=&quot;https://github.com/Powerlevel9k/powerlevel9k&quot;&gt;powerlevel9k&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;字体下载&amp;amp;配置：&lt;a href=&quot;https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font&quot;&gt;Install Powerline Fonts&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;zsh插件推荐&quot;&gt;zsh插件推荐&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;zsh-users/zsh-autosuggestions&lt;/a&gt;：基于输入的历史命令，在输入命令时进行补全提示
&lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;zsh-users/zsh-syntax-highlighting&lt;/a&gt;：高亮你的 zsh 可用命令&lt;/p&gt;

&lt;h2 id=&quot;xcode-command-line-tools&quot;&gt;Xcode command line tools&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode command line tools&lt;/code&gt; 是 Mac 下面一系列重要程序开发工具命令的集合，例如：ake, gcc, g++, clang, perl, svn, git等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装方法&lt;/strong&gt;
直接打开命令行终端，通过下面的命令安装即可：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;卸载方法&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo rm -rf /Library/Developer/CommandLineTools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;查看 Xcode command line tools 中安装的命令集合的方法&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls /Library/Developer/CommandLineTools/usr/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vim-编辑器使用技巧&quot;&gt;vim 编辑器使用技巧&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/vim-key.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://harttle.land/2015/11/07/vim-cursor.html&quot;&gt;Vim中如何快速进行光标移动&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;sublime-text-3&quot;&gt;Sublime Text 3&lt;/h2&gt;

&lt;h3 id=&quot;在命令行终端启动-sublime-text-3-的方法&quot;&gt;在命令行终端启动 sublime text 3 的方法&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot;&lt;/span&gt; /usr/local/bin/subl 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置-cc-代码编译环境&quot;&gt;配置 C/C++ 代码编译环境&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tools -&amp;gt; Build System -&amp;gt; New Buld System&lt;/code&gt; 新建编译系统，在新打开的窗口中替换下面的代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	&quot;cmd&quot;: [&quot;bash&quot;, &quot;-c&quot;, &quot;g++ &apos;${file}&apos; -o &apos;${file_path}/${file_base_name}&apos; &amp;amp;&amp;amp; osascript -e &apos;tell application \&quot;Terminal\&quot; to activate do script \&quot;clear&amp;amp;&amp;amp;${file_path}/${file_base_name} &amp;amp;&amp;amp; read -p \\\&quot;Press Enter to exit.\\\&quot;&amp;amp;&amp;amp;exit\&quot;&apos;&quot;],
    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,
    &quot;working_dir&quot;: &quot;${file_path}&quot;,
    &quot;selector&quot;: &quot;source.c, source.c++&quot;,

    &quot;variants&quot;:
    [
        {
            &quot;name&quot;: &quot;Run&quot;,
            &quot;cmd&quot;: [&quot;bash&quot;, &quot;-c&quot;, &quot;g++ &apos;${file}&apos; -o &apos;${file_path}/${file_base_name}&apos; &amp;amp;&amp;amp; &apos;${file_path}/${file_base_name}&apos;&quot;]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command + s&lt;/code&gt; 保存，命名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyC++&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tools -&amp;gt; Build System&lt;/code&gt; 选中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyC++&lt;/code&gt; 作为默认的编译脚本。&lt;/p&gt;

&lt;p&gt;最后，每当我们编写完 C/C++ 代码时，就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command + Shift + B&lt;/code&gt; 快捷键编译并运行程序了（&lt;strong&gt;注意选择不带 Run 那个选项&lt;/strong&gt;），它默认会打开并跳转到一个终端界面去执行程序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果不需要从标准输入中读取输入数据，那么我们可以在调用快捷键 Command + Shift + B 之后弹出的选择框中选择加 Run 的选项来直接在 Sublime Text 中运行程序并看到最终程序运行输出的结果。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;让-sublime-记住上一次关闭前打开的文件&quot;&gt;让 Sublime 记住上一次关闭前打开的文件&lt;/h3&gt;
&lt;p&gt;只需要在 Sublime Text 3 退出时，按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command + q&lt;/code&gt; 键退出即可。&lt;/p&gt;

&lt;h2 id=&quot;brew-包管理工具&quot;&gt;brew 包管理工具&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew&lt;/code&gt; 是 Mac 下的第三方包管理工具，它类似于 Ubuntu 系统中自带的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; 包管理工具。&lt;/p&gt;

&lt;p&gt;具体的安装方法详见官网：&lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在终端中运行以下命令，确保 brew 运行正常：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew&lt;/code&gt; 安装命令行工具的方法：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完成之后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew&lt;/code&gt; 默认将命令行工具安装到 &lt;em&gt;/usr/local/bin&lt;/em&gt;
 目录下面。&lt;/p&gt;

&lt;h3 id=&quot;brew-常用命令&quot;&gt;brew 常用命令&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew search &amp;lt;pkg_name&amp;gt;  &lt;span class=&quot;c&quot;&gt;#查找软件包&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;pkg_name&amp;gt;  &lt;span class=&quot;c&quot;&gt;#安装软件包&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew list &lt;span class=&quot;c&quot;&gt;#列出软件包&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew uninstall &amp;lt;pkg_name&amp;gt; &lt;span class=&quot;c&quot;&gt;#卸载软件包&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew update &lt;span class=&quot;c&quot;&gt;#更新&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew info &amp;lt;pkg_name&amp;gt; &lt;span class=&quot;c&quot;&gt;#查看软件包的基本资料&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nodejs-安装&quot;&gt;Node.js 安装&lt;/h2&gt;

&lt;h3 id=&quot;安装-nvm-node-version-manager&quot;&gt;安装 NVM （Node Version Manager）&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew&lt;/code&gt; 安装 nvm&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置 nvm 相关环境变量&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# You should create NVM&apos;s working directory if it doesn&apos;t exist:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/.nvm

&lt;span class=&quot;c&quot;&gt;# Add the following to ~/.zshrc or your desired shell&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#configuration file:&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NVM_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.nvm&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/opt/nvm/nvm.sh&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试 nvm 是否安装成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ nvm

Node Version Manager

Note: &amp;lt;version&amp;gt; refers to any version-like string nvm understands. This includes:
  - full or partial version numbers, starting with an optional &lt;span class=&quot;s2&quot;&gt;&quot;v&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.10, v0.1.2, v1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - default &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;built-in&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; aliases: node, stable, unstable, iojs, system
  - custom aliases you define with &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;foo&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

 Any options that produce colorized output should respect the &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--no-colors&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; option.

Usage:
  nvm &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;                                Show this message
  nvm &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;                             Print out the latest released version of nvm
  nvm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &amp;lt;version&amp;gt;                Download and &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;a &amp;lt;version&amp;gt;, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; from source. Uses .nvmrc &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available
    &lt;span class=&quot;nt&quot;&gt;--reinstall-packages-from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;version&amp;gt;     When installing, reinstall packages installed &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;node|iojs|node version number&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;--lts&lt;/span&gt;                                   When installing, only &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;from LTS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;long-term support&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; versions
    &lt;span class=&quot;nt&quot;&gt;--lts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;LTS name&amp;gt;                        When installing, only &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;from versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a specific LTS line
  nvm uninstall &amp;lt;version&amp;gt;                   Uninstall a version
  nvm uninstall &lt;span class=&quot;nt&quot;&gt;--lts&lt;/span&gt;                       Uninstall using automatic LTS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;long-term support&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;lts/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available.
  nvm uninstall &lt;span class=&quot;nt&quot;&gt;--lts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;LTS name&amp;gt;            Uninstall using automatic &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;provided LTS line, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available.
  nvm use &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--silent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &amp;lt;version&amp;gt;              Modify PATH to use &amp;lt;version&amp;gt;. Uses .nvmrc &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available
    &lt;span class=&quot;nt&quot;&gt;--lts&lt;/span&gt;                                   Uses automatic LTS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;long-term support&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;lts/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available.
    &lt;span class=&quot;nt&quot;&gt;--lts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;LTS name&amp;gt;                        Uses automatic &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;provided LTS line, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available.
    ......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用-nvm-安裝-nodejs&quot;&gt;使用 NVM 安裝 Node.js&lt;/h3&gt;
&lt;p&gt;找出目前所有可安裝的 Node.js 版本&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm ls-remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装当前最新的稳定版本的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试安装的 Node.js&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
v7.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试 npm&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ npm &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
3.10.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;修改-npm-包管理器下载的镜像源&quot;&gt;修改 npm 包管理器下载的镜像源&lt;/h3&gt;
&lt;p&gt;使用 taobo 定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \
  --cache=$HOME/.npm/.cache/cnpm \
  --disturl=https://npm.taobao.org/dist \
  --userconfig=$HOME/.cnpmrc&quot;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;安装模块&lt;/strong&gt;
从 registry.npm.taobao.org 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPM registry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//使用这种方法安装 node 模块时，在终端一定要取消掉 http_proxy 和 https_proxy 代理·

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Blockquote

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cnpm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;同步模块&lt;/strong&gt;
直接通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync&lt;/code&gt; 命令马上同步一个模块, 只有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cnpm&lt;/code&gt; 命令行才有此功能:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cnpm &lt;span class=&quot;nb&quot;&gt;sync &lt;/span&gt;connect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;剪贴板管理命令pbcopy-和-pbpaste&quot;&gt;剪贴板管理命令：pbcopy 和 pbpaste&lt;/h2&gt;
&lt;p&gt;这两个工具可以打通命令行和剪贴板。当然用鼠标操作复制粘贴也可以——但这两个工具的真正威力，发挥在将其用作Unix工具的时候。意思就是说：可以将这两个工具用作管道、IO重定向以及和其他命令的整合。例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ~ | pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以将主目录的文件列表复制到剪贴板。&lt;/p&gt;

&lt;p&gt;也可以把任意文件的内容复制到剪贴板中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pbcopy &amp;lt; blogpost.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将剪贴板中的内容输出保存到一个文件中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pbpaset &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;omnigraffle&quot;&gt;OmniGraffle&lt;/h2&gt;
&lt;p&gt;OmniGraffle 是 Mac 上非常强大的绘图软件，它可以绘制流程图，思维导图，产品原型图等等，而且还有非常丰富的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stencils&lt;/code&gt; 模板，直接导入然后进行修改，得到自己想要的图形。&lt;/p&gt;

&lt;h2 id=&quot;jekyll博客环境搭建&quot;&gt;Jekyll博客环境搭建&lt;/h2&gt;

&lt;h3 id=&quot;安装-rvm&quot;&gt;安装 RVM&lt;/h3&gt;
&lt;p&gt;RVM是Ruby的版本管理工具，我们可以使用它来帮助我们安装Ruby。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; get.rvm.io | bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，我们需要再入RVM环境。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.rvm/scripts/rvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm -v&lt;/code&gt; 就可以检查RVM是否安装成功了。&lt;/p&gt;

&lt;h3 id=&quot;使用rvm安装ruby&quot;&gt;使用RVM安装Ruby&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rvm install ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等一段时间，Ruby，Ruby Gems就安装好了。&lt;/p&gt;

&lt;p&gt;可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem -v&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;来检查是否安装成功。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 配置好shell环境上的代理&lt;/span&gt;
gem update &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;用-rubygems-安装-jekyll&quot;&gt;用 RubyGems 安装 Jekyll&lt;/h3&gt;

&lt;p&gt;安装 Jekyll 的最好方式就是使用 RubyGems. 你只需要打开终端输入以下命令就可以安装了：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll-archives
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll-sitemap
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所有的 Jekyll 的 gem 依赖包都会被自动安装，所以你完全不用去担心。&lt;/p&gt;

&lt;h2 id=&quot;ssh-常用技巧&quot;&gt;ssh 常用技巧&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;免密登录远程主机&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 如果本机公钥还没有生成，那么可以使用命令：ssh-keygen 生成
 $ ssh-copy-id arclab@10.214.9.170
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;快速登录远程主机&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 为了避免每次 ssh 连接远程主机时输入一长串的 username@host-ip，可以将远程主机用一个简单的字符串来标识，修改方法如下
 $ vim ~/.ssh/config
 HOST droidocker
 User arclab
 Port 22
 HostName 10.214.9.170
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;端口转发工具&quot;&gt;端口转发工具&lt;/h2&gt;

&lt;p&gt;一个C语言开发的开源TCP端口转发工具， 将TCP连接从一个IP地址和端口重定向到另一个IP地址和端口。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/samhocevar/rinetd.git

&lt;span class=&quot;c&quot;&gt;# 编译&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rinetd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./bootstrap
+ &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;no &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
+ aclocal &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; .auto &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
+ autoconf
+ &lt;span class=&quot;nb&quot;&gt;test yes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
+ autoheader
+ &lt;span class=&quot;nb&quot;&gt;test yes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
+ automake &lt;span class=&quot;nt&quot;&gt;--foreign&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-missing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--copy&lt;/span&gt;
configure.ac:10: installing &lt;span class=&quot;s1&quot;&gt;&apos;.auto/compile&apos;&lt;/span&gt;
configure.ac:7: installing &lt;span class=&quot;s1&quot;&gt;&apos;.auto/install-sh&apos;&lt;/span&gt;
configure.ac:7: installing &lt;span class=&quot;s1&quot;&gt;&apos;.auto/missing&apos;&lt;/span&gt;
src/Makefile.am: installing &lt;span class=&quot;s1&quot;&gt;&apos;.auto/depcomp&apos;&lt;/span&gt;
+ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Rf&lt;/span&gt; autom4te.cache

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install
&lt;/span&gt;Making &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;src
make[1]: Entering directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd/src&apos;&lt;/span&gt;
make  install-am
make[2]: Entering directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd/src&apos;&lt;/span&gt;
make[3]: Entering directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd/src&apos;&lt;/span&gt;
 /bin/mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/usr/local/sbin&apos;&lt;/span&gt;
  /usr/bin/install &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; ../rinetd &lt;span class=&quot;s1&quot;&gt;&apos;/usr/local/sbin&apos;&lt;/span&gt;
make[3]: Nothing to be &lt;span class=&quot;k&quot;&gt;done for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;install-data-am&apos;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
make[3]: Leaving directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd/src&apos;&lt;/span&gt;
make[2]: Leaving directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd/src&apos;&lt;/span&gt;
make[1]: Leaving directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd/src&apos;&lt;/span&gt;
make[1]: Entering directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd&apos;&lt;/span&gt;
make[2]: Entering directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd&apos;&lt;/span&gt;
 /bin/mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/usr/local/etc&apos;&lt;/span&gt;
 /usr/bin/install &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 644 rinetd.conf &lt;span class=&quot;s1&quot;&gt;&apos;/usr/local/etc&apos;&lt;/span&gt;
 /bin/mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/usr/local/share/man/man8&apos;&lt;/span&gt;
 /usr/bin/install &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 644 rinetd.8 &lt;span class=&quot;s1&quot;&gt;&apos;/usr/local/share/man/man8&apos;&lt;/span&gt;
make[2]: Leaving directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd&apos;&lt;/span&gt;
make[1]: Leaving directory &lt;span class=&quot;s1&quot;&gt;&apos;/home/flyflypeng/OpenSourceProject/rinetd&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置文件路径：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/etc/rinetd.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /usr/local/etc/rinetd.conf

&lt;span class=&quot;c&quot;&gt;# 将本机上9000端口转到本机回环地址上的12333端口&lt;/span&gt;
0.0.0.0 9000 127.0.0.1 12333
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动rinetd服务：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi /etc/systemd/system/rinetd.service

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rinetd

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/sbin/rinetd &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /usr/local/etc/rinetd.conf
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;rinetd.service &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl start rinetd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014992947&quot;&gt;iTerm2 + Oh My Zsh 打造舒适终端体验&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 23 Mar 2020 04:00:31 +0800</pubDate>
        <link>http://localhost:4000/%E5%88%A9%E5%99%A8/2020/03/23/Mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%88%A9%E5%99%A8/2020/03/23/Mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
        
        <category>Mac</category>
        
        <category>Jekyll</category>
        
        <category>iTerm2</category>
        
        <category>zsh</category>
        
        
        <category>利器</category>
        
      </item>
    
      <item>
        <title>QEMU/KVM 原理综述</title>
        <description>&lt;h2 id=&quot;qemu-工作原理简介&quot;&gt;QEMU 工作原理简介&lt;/h2&gt;

&lt;p&gt;QEMU是一款开源的模拟器和虚拟机监视器（Virtual Machine Monitor, VMM）。QEMU主要提供两个功能给用户使用：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;作为用户态模拟器：通过动态代码翻译机制来执行不同架构的代码，例如在X86平台上模拟ARM平台下执行环境。&lt;/li&gt;
  &lt;li&gt;作为虚拟机监视器：模拟全系统，利用其它VMM（Xen，KVM等等）来使用硬件提供的虚拟化支持，创建接近于主机性能的虚拟机。&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;qemu虚拟化的主要原理&quot;&gt;QEMU虚拟化的主要原理&lt;/h3&gt;

&lt;p&gt;系统虚拟化最重要的就是虚拟化出计算机系统中最重要的三大组件：CPU、内存和IO设备。QEMU虚拟出来的CPU成为vCPU，为了提升vCPU执行Guest OS中指令的效率，通过KVM、Xen等虚拟化技术，直接利用CPU硬件虚拟化的支持，在主机上安全地执行虚拟机代码（需要BIOS中CPU开启对应的硬件虚拟化支持）。&lt;/p&gt;

&lt;p&gt;在x86平台上最常见的虚拟化组合就是QEMU/KVM的组合了，其中利用QEMU来模拟IO外设，通过KVM来捕获Guest OS中运行的指令并将其中非特权指令在物理CPU上直接运行，达到硬件加速的目的。&lt;/p&gt;

&lt;p&gt;KVM内核模块对用户空间只暴露出一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/kvm&lt;/code&gt;的设备文件，然后通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ioctl&lt;/code&gt;命令与QEMU进程进行通信，KVM利用硬件扩展直接将虚拟机代码运行于主机之上，当vCPU需要执行访问IO设备寄存器的指令时，vCPU就会停止从退回到QEMU进程中，由QEMU去模拟操作的结果。&lt;/p&gt;

&lt;h2 id=&quot;kvm-虚拟化原理简介&quot;&gt;KVM 虚拟化原理简介&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;KVM是Linux内核的一个虚拟化特性，由一组内核模块文件组成，它可以让QEMU中运行的Guest OS的指令直接在Host OS上的CPU中执行，&lt;strong&gt;前提是Guest OS和Host OS的硬件架构相同&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;KVM解决了虚拟化中的哪个痛点？有什么优势？
  KVM主要解决的虚拟化中CPU虚拟化的问题，这部分详细内容可以参见&lt;strong&gt;CPU虚拟化&lt;/strong&gt;相关内容。
    &lt;ul&gt;
      &lt;li&gt;没有KVM虚拟化加速
  QEMU需要截获Guest OS中运行的所有指令，然后通过软件的方式模拟执行，如果是跨平台架构的Guest OS，那么还需要额外的二进制指令翻译，将Guest OS中目标架构的指令翻译成Host OS上所能执行的指令，导致虚拟化的效率非常低。&lt;/li&gt;
      &lt;li&gt;有KVM虚拟化加速
  如果QEMU中运行的Guest OS和Host OS的硬件架构相同，那么Guest OS中的指令可以直接在Host OS上的物理CPU上执行，而不需要通过QEMU软件模拟的方式去执行Guest OS中的指令，大大提高了Guest虚拟机的性能。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;QEMU结合KVM执行Guest OS指令的步骤简要描述&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：
    &lt;blockquote&gt;
      &lt;p&gt;打开/dev/kvm设备文件、创建虚拟机、创建vCPU、向KVM模块发送KVM_RUN的ioctl调用，接下来KVM模块利用CPU上的硬件虚拟化扩展功能来直接执行guest的运行。当guest在执行过程中遇到读取硬件设备寄存器等I/O操作、暂停guest CPU或其他特殊指令等KVM无法执行的操作时，会退出当前KVM并交由Qemu处理。Qemu模拟器判断退出原因并执行相应的操作：如果是遇到I/O操作或特殊指令，Qemu会去模拟执行这些操作；如果是暂停guest CPU操作，Qemu停止并等待下一次guest中断。
  上述流程用下面的代码来简单表示：&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev/kvm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVM_CREATE_VM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVM_CREATE_VCPU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
       &lt;span class=&quot;n&quot;&gt;ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVM_RUN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
       &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit_reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 分析退出原因，并执行相应操作 */&lt;/span&gt;
    
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KVM_EXIT_IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KVM_EXIT_HLT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Host, QEMU, Guest之间的关系图
  &lt;img src=&quot;http://97.64.33.222/temp/1811/99149dd24c5fc6b2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/xiongwenwu/article/details/58586013&quot;&gt;KVM/Qemu 工作原理系列目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/community/blogs/5144904d-5d75-45ed-9d2b-cf1754ee936a/entry/20160805?lang=en&quot;&gt;QEMU深入解析：综述篇&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 21 Nov 2018 08:12:33 +0800</pubDate>
        <link>http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/11/21/QEMU-KVM-%E5%8E%9F%E7%90%86%E7%BB%BC%E8%BF%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/11/21/QEMU-KVM-%E5%8E%9F%E7%90%86%E7%BB%BC%E8%BF%B0.html</guid>
        
        <category>虚拟化</category>
        
        <category>QEMU</category>
        
        <category>KVM</category>
        
        
        <category>虚拟化</category>
        
      </item>
    
      <item>
        <title>Android 系统图形栈（二）：OpenGL ES 库和 EGL 库加载过程</title>
        <description>&lt;h2 id=&quot;1-opengl-es-和-opengl-es-库的区别&quot;&gt;1. OpenGL ES 和 OpenGL ES 库的区别&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OpenGL ES&lt;/strong&gt; ： 它本身只是一个协议规范，定义了一套可以供上层应用程序进行调用的 API，它抽象了 GPU 的功能，使应用开发者不必关心底层的 GPU 类型和具体实现。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OpenGL ES 库&lt;/strong&gt;：OpenGL ES 库就是上面 OpenGL ES 中定义的 API 的具体实现。由于每个显卡制造厂商的 GPU 硬件结构不同，从而导致各个厂商的OpenGL ES 库也各不相同，所以 Android 系统中的 OpenGL ES 库通常是由硬件厂商提供的，通常存放在 Android 系统中的 &lt;em&gt;/system/lib64/egl&lt;/em&gt; 下面或者 &lt;em&gt;/vendor/lib64/egl&lt;/em&gt; 目录下。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OpenGL ES Wrapper 库&lt;/strong&gt;：OpenGL ES Wrapper 库是一个对 OpenGL ES API 进行封装的一个包裹库，它向上为应用程序提供了标准的 OpenGL ES API，向下可以和不同厂商实现的 OpenGL ES 库进行绑定，将 OpenGL ES API 和对应的实现函数一一绑定在一起。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并且，OpenGL ES 库的实现分为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;软件模拟实现&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;硬件加速实现&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在，因为我们 Android 手机中的 Soc 片上芯片中都集成了 GPU 模块，所以这里使用的就是硬件加速实现的 OpenGL ES 库。但是，像 Android Emulator 中的 Android 系统，如果不支持将 OpenGL ES API 指令重定向到主机系统的 GPU 加速执行的话，它所采用的 OpenGL ES 库就是软件模拟实现的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;
同理，如前面一篇文章&lt;a href=&quot;http://woshijpf.github.io/android/2017/09/04/Android%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BD%A2%E6%A0%88-OpenGLES%E5%92%8CEGL%E4%BB%8B%E7%BB%8D.html&quot;&gt;Android 系统图形栈: OpenGL ES 和 EGL 介绍&lt;/a&gt;中介绍的，EGL 也是一套 API，它的实现也需要系统厂商来提供。系统厂商通常会将这两套 API 的实现封装在一个共享链接库中，但是根据最新的标准，OpenGL ES API 实现的共享链接库和 EGL API 实现的共享链接库是独立分开的，例如 2.2 小节中列举的 Nexus 9 平板设备中 OpenGL ES 和 EGL API 实现库就是独立分开的。&lt;/p&gt;

&lt;h2 id=&quot;2-android-中-opengl-es-软件层次栈&quot;&gt;2. Android 中 OpenGL ES 软件层次栈&lt;/h2&gt;
&lt;p&gt;按照分层理念的设计，Android 中的 OpenGL ES 实现也是层次设计的，形成一个软件层次栈。最上面的是 Java 层，接着下面是 JNI 层，再调用下面的 wrapper 层，wrapper 层下面则是 OpenGL ES API 的具体软件实或者硬件实现了。整个 OpenGL 软件层次栈的调用关系如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://picturebed.obs.cn-east-2.myhuaweicloud.com/blogPictures/OpenGL_ES_call_graph.png&quot; alt=&quot;OpenGL 软件层次栈&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-opengl-esegl-wrapper-库&quot;&gt;2.1 OpenGL ES/EGL Wrapper 库&lt;/h3&gt;
&lt;p&gt;前面我们已经介绍过 OpenGL ES/EGL Wrapper 库是一个将 OpenGL ES API 和 OpenGL ES API 具体实现绑定在一起的库，它对应的源码路径是：&lt;em&gt;/frameworks/native/opengl/libs/&lt;/em&gt;，其中:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLESv1_CM.so&lt;/code&gt;：OpenGL ES 1.x API 的 Wrapper 库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLESv2.so&lt;/code&gt;：OpenGL ES 2.0 的 Wrapper 库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLESv3.so&lt;/code&gt;：OpenGL ES 3.0 的 Wrapper 库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中因为 OpenGL ES 3.0 API 是兼容 OpenGL ES 2.0 API 的，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLESv2.so&lt;/code&gt; 库本质上和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLESv3.so&lt;/code&gt; 库是一样的。&lt;/p&gt;

&lt;h3 id=&quot;22-opengl-esegl-实现库&quot;&gt;2.2 OpenGL ES/EGL 实现库&lt;/h3&gt;
&lt;p&gt;如果Android系统平台支持 OpenGL ES 硬件加速渲染，那么 OpenGL ES/EGL 实现库由系统厂商以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.so&lt;/code&gt;的共享链接库的形式提供，例如，Nexus 9 平板中的厂商提供的 OpenGL ES/EGL 实现库为：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flounder:/vendor/lib64/egl &lt;span class=&quot;c&quot;&gt;# ls&lt;/span&gt;
libEGL_tegra.so libGLESv1_CM_tegra.so libGLESv2_tegra.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果Android系统平台不支持 OpenGL ES 硬件加速渲染，那么它就会默认启用软件模拟渲染，这时 OpenGL ES/EGL 实现库就是由 AOSP 提供，链接库的存在的路径为： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/system/lib64/egl/libGLES_android.so&lt;/code&gt;。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLES_android.so&lt;/code&gt; 库在 Android 7.1 系统对应的实现源码路径为：&lt;em&gt;/frameworks/native/opengl/libagl/&lt;/em&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;3-android-71-中加载-opengl-es-库的过程&quot;&gt;3. Android 7.1 中加载 OpenGL ES 库的过程&lt;/h2&gt;
&lt;p&gt;Android 中图形渲染所采用的方式（硬件 or 软件）是在系统启动之后动态确定的，而确定渲染方式的这个源码文件就是 &lt;em&gt;/frameworks/native/opengl/libs/EGL/Loader.cpp&lt;/em&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;31-android-71-opengl-es-库和-egl-库加载说明&quot;&gt;3.1 Android 7.1 OpenGL ES 库和 EGL 库加载说明&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.2net.co.uk/tutorial/android-egl-cgf-is-dead&quot;&gt;How Android finds OpenGL libraries, and the death of egl.cfg&lt;/a&gt; 这篇文章中提到了非常关键的一点，就是从 Android Kitkat 4.4 之后，Android 中加载 OpenGL ES/EGL 库的方法发生了变化了（&lt;strong&gt;但是整个加载过程都是由 /frameworks/native/opengl/libs/EGL/Loader.cpp 程序所决定的，也就是说 Loader.cpp 文件发生了变化&lt;/strong&gt;）。&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;Android 4.4 之前&lt;/strong&gt;，加载 OpenGL ES 库是由 &lt;em&gt;/system/lib/egl/egl.cfg&lt;/em&gt; 文件所决定的，通过读取这个配置文件来确定是加载 OpenGL ES 软件模拟实现的库，还是OpenGL ES 硬件加速实现的库。&lt;/p&gt;

&lt;p&gt;但是，在Android 4.4 之后，Android 不再通过读取 egl.cfg 配置文件的方式来加载 OpenGL ES 库，新的加载 OpenGL ES 库的规则，如下所示：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从 &lt;em&gt;/system/lib/egl&lt;/em&gt; 或者 &lt;em&gt;/vendor/lib/egl/&lt;/em&gt; 目录下加载 libGLES.so 库文件或者 libEGL_vendor.so，libGLESv1_CM_vendor.so，libGLESv2_vendor.so 库文件。&lt;/li&gt;
  &lt;li&gt;为了向下兼容旧的库的命名方式，同样也会加载 &lt;em&gt;/system/lib/egl&lt;/em&gt; 或者 &lt;em&gt;/vendor/lib/egl/&lt;/em&gt; 目录下的 libGLES_*.so 或者 libEGL_*.so，libGLESv1&lt;em&gt;CM&lt;/em&gt;*.so，libGLESv2_*.so 库文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;32硬件加速渲染-or-软件模拟渲染&quot;&gt;3.2　硬件加速渲染 or 软件模拟渲染？&lt;/h3&gt;

&lt;p&gt;前面我们提到 OpenGL ES 库的实现方式有两种，一种是硬件加速实现，一种是软件模拟实现，那么系统是怎么确定加载那一种 OpenGL ES 库的呢？&lt;/p&gt;

&lt;p&gt;Android 7.1 源码中负责加载 OpenGL ES/EGL 库部分的代码位于：&lt;em&gt;/frameworks/native/opengl/libs/EGL/Loader.cpp&lt;/em&gt; 文件中，这个文件中代码的主要入口函数是 &lt;strong&gt;Loader::open()&lt;/strong&gt; 函数，而决定加载&lt;strong&gt;硬件加速渲染库&lt;/strong&gt;还是&lt;strong&gt;软件模拟渲染库&lt;/strong&gt;主要涉及到下面两个函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;setEmulatorGlesValue()&lt;/li&gt;
  &lt;li&gt;checkGlesEmulationStatus()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面就来简要的分析一下 Android 系统是如何选择加载&lt;strong&gt;硬件加速渲染库&lt;/strong&gt;还是&lt;strong&gt;软件模拟渲染库&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader::open()&lt;/code&gt; 入口函数会调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setEmulatorGlesValue()&lt;/code&gt; 从 property 属性系统中获取一些属性值来判断当前 Android 系统是否在 Emulator 环境中运行，并根据读取出来的信息来重新设置新的属性键值对，setEmulatorGlesValue() 函数的代码如下所示：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static void setEmulatorGlesValue(void) {
     char prop[PROPERTY_VALUE_MAX];
     property_get(&quot;ro.kernel.qemu&quot;, prop, &quot;0&quot;); //读取 ro.kernel.qemu 属性值，判断Android系统是否运行在 qemu 中
     if (atoi(prop) != 1) return;
    
     property_get(&quot;ro.kernel.qemu.gles&quot;, prop, &quot;0&quot;); //读取 ro.kernel.qemu.gles 属性值，判断 qemu 中 OpenGL ES 库的实现方式
     if (atoi(prop) == 1) {
         ALOGD(&quot;Emulator has host GPU support, qemu.gles is set to 1.&quot;);
         property_set(&quot;qemu.gles&quot;, &quot;1&quot;);
         return;
     }
    
     // for now, checking the following
     // directory is good enough for emulator system images
     const char* vendor_lib_path =
 #if defined(__LP64__)
         &quot;/vendor/lib64/egl&quot;;
 #else
         &quot;/vendor/lib/egl&quot;;
 #endif
    
     const bool has_vendor_lib = (access(vendor_lib_path, R_OK) == 0);
     //如果存在 vendor_lib_path 这个路径，那么就说明厂商提供了 OpenGL ES库自己的软件模拟渲染库，而不是 Android 系统自己编译得到的软件模拟渲染库
     if (has_vendor_lib) {
         ALOGD(&quot;Emulator has vendor provided software renderer, qemu.gles is set to 2.&quot;);
         property_set(&quot;qemu.gles&quot;, &quot;2&quot;);
     } else {
         ALOGD(&quot;Emulator without GPU support detected. &quot;
               &quot;Fallback to legacy software renderer, qemu.gles is set to 0.&quot;);
         property_set(&quot;qemu.gles&quot;, &quot;0&quot;); //最后，默认采取的是方案就是调用传统的Android系统自己编译得到软件模拟渲染库
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_system_driver()&lt;/code&gt; 函数中，内部类 MatchFile 类中会调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkGlesEmulationStatus()&lt;/code&gt; 函数来检查 Android 系统是否运行在模拟器中，以及在模拟器中是否启用了主机硬件加速的功能，然后根据 checkGlesEmulationStatus() 函数的返回状态值来确定要加载共享链接库的文件绝对路径。load_system_driver() 和 checkGlesEmulationStatus() 函数代码如下所示：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static void* load_system_driver(const char* kind) {
     ATRACE_CALL();
     class MatchFile {
     public:
         //这个函数作用是返回需要加载打开的 OpenGL ES 和 EGL API 实现库文件的绝对路径
         static String8 find(const char* kind) {
             String8 result;
             int emulationStatus = checkGlesEmulationStatus(); //检查 Android 系统是否运行在模拟器中，以及在模拟器中是否启用了主机硬件加速的功能
             switch (emulationStatus) {
             case 0: //Android 运行在模拟器中，使用系统软件模拟实现的 OpenGL ES API 库 libGLES_android.so
 #if defined(__LP64__)
                 result.setTo(&quot;/system/lib64/egl/libGLES_android.so&quot;);
 #else
                 result.setTo(&quot;/system/lib/egl/libGLES_android.so&quot;);
 #endif
                 return result;
             case 1: // Android 运行在模拟器中，通过主机系统中实现 OpenGL ES 加速渲染，通过 libGLES_emulation.so 库将  OpenGL ES API 指令重定向到 host 中执行
                 // Use host-side OpenGL through the &quot;emulation&quot; library
 #if defined(__LP64__)
                 result.appendFormat(&quot;/system/lib64/egl/lib%s_emulation.so&quot;, kind);
 #else
                 result.appendFormat(&quot;/system/lib/egl/lib%s_emulation.so&quot;, kind);
 #endif
                 return result;
             default:
                 // Not in emulator, or use other guest-side implementation
                 break;
             }
    
             // 如果不是上面两种情况，就根据库的命名规则去找到厂商实现库文件的绝对路径
             String8 pattern;
             pattern.appendFormat(&quot;lib%s&quot;, kind);
             const char* const searchPaths[] = {
 #if defined(__LP64__)
                 &quot;/vendor/lib64/egl&quot;,
                 &quot;/system/lib64/egl&quot;
 #else
                 &quot;/vendor/lib/egl&quot;,
                 &quot;/system/lib/egl&quot;
 #endif
             };
                
             ......
     }
        
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static int
 checkGlesEmulationStatus(void)
 {
     /* We&apos;re going to check for the following kernel parameters:
      *
      *    qemu=1                      -&amp;gt; tells us that we run inside the emulator
      *    android.qemu.gles=&amp;lt;number&amp;gt;  -&amp;gt; tells us the GLES GPU emulation status
      *
      * Note that we will return &amp;lt;number&amp;gt; if we find it. This let us support
      * more additionnal emulation modes in the future.
      */
     char  prop[PROPERTY_VALUE_MAX];
     int   result = -1;
    
     /* Check if hardware acceleration disabled explicitly */
     property_get(&quot;debug.egl.hw&quot;, prop, &quot;1&quot;); //读取 debu.egl.hw 属性值，判断3D硬件加速功能是否被关闭了
     if (!atoi(prop)) {
         ALOGD(&quot;3D hardware acceleration is disabled&quot;);
         return 0;
     }
    
     /* First, check for qemu=1 */
     property_get(&quot;ro.kernel.qemu&quot;, prop, &quot;0&quot;); //读取ro.kernel.qemu，判断是否运行在 qemu 中
     if (atoi(prop) != 1)
         return -1;
    
     /* We are in the emulator, get GPU status value */
     property_get(&quot;qemu.gles&quot;, prop, &quot;0&quot;); // 如果 Android 系统运行在 qemu 中，就返回 qemu.gles 的值，根据这个值就可以确定加载的是那种 OpenGL ES 库了
     return atoi(prop);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;总结一下上面代码的功能就是，首先判断 Android 是否在 qemu 虚拟机中运行，如果不是，那么就直接去加载厂商存放库的路径中去加载 OpenGL ES 实现库（不管是硬件加速实现的，还是软件模拟实现的）；如果是在 qemu 中运行，那么就要根据返回的 &lt;strong&gt;emulationStatus&lt;/strong&gt; 值 来确定是加软件模拟实现的 OpenGL ES API 库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLES_android.so&lt;/code&gt;，还是加载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libGLES_emulation.so&lt;/code&gt;库将 OpenGL ES 指令重定向到 Host 系统中去执行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;33-opengl-esegl-库加载和解析过程&quot;&gt;3.3 OpenGL ES/EGL 库加载和解析过程&lt;/h3&gt;
&lt;p&gt;正如&lt;a href=&quot;http://woshijpf.github.io/android/2017/09/04/Android%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BD%A2%E6%A0%88-OpenGLES%E5%92%8CEGL%E4%BB%8B%E7%BB%8D.html&quot;&gt;Android 系统图形栈: OpenGL ES 和 EGL 介绍&lt;/a&gt;这篇文章中分析的那样，在进行 OpenGL 编程时，最先开始需要获取 Display，这将调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eglgGetDisplay()&lt;/code&gt; 函数被调用。在 eglGetDisplay() 里则会调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;egl_init_drivers()&lt;/code&gt; 初始化驱动：装载各个库进行解析，将 OpenGL ES/EGL API 函数接口和具体的实现绑定在一起，并将结果保存在 &lt;strong&gt;egl_connection_t&lt;/strong&gt; 类型的全局变量 &lt;strong&gt;gEGLImpl&lt;/strong&gt; 的结构体的成员变量中。&lt;/p&gt;

&lt;p&gt;下面以 SurfaceFlinger 进程为例进行分析，整个 OpenGL ES/EGL 库的加载和解析流程如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: Start
op1=&amp;gt;operation: SurfaceFlinger::init()
sub=&amp;gt;subroutine: Your Subroutine
op2=&amp;gt;operation: eglGetDisplay(EGL_DEFAULT_DISPLAY)
op3=&amp;gt;operation: egl_init_drivers()
op4=&amp;gt;operation: egl_init_drivers_locked();
op5=&amp;gt;operation: loader.open()
op6=&amp;gt;operation: load_driver()
op7=&amp;gt;operation: load_system_driver()
op8=&amp;gt;operation: Loader::init_api()
e=&amp;gt;end

st-&amp;gt;op1-&amp;gt;op2-&amp;gt;op3-&amp;gt;op4-&amp;gt;op5-&amp;gt;op6-&amp;gt;op7-&amp;gt;op8-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;331-geglimpl-全局变量&quot;&gt;3.3.1 gEGLImpl 全局变量&lt;/h4&gt;

&lt;p&gt;struct egl_connection_t 类型的 gEGLImpl 全局变量是一个非常重要变量，它里面的成员指向了打开的 OpenGL ES/EGL Wrapper 库和 OpenGL ES/EGL 实现库：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/egl.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gEGLImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gl_hooks_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gHooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gl_hooks_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gHooksNoContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 egl_connection_t 的定义：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/egldefs.h&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;egl_connection_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GLESv1_INDEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GLESv2_INDEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//指向打开的共享链接库的句柄&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gl_hooks_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//指向打开的 OpenGL ES API 对象&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 主版本好&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;egl_t&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;egl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//dui x&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;libEgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;libGles1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;libGles2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就对其中的主要成员进行一个说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hooks：这是一个 gl_hook_t* 类型的指针数组，它最终将 OpenGL ES API 和实现库钩在一起。&lt;/li&gt;
  &lt;li&gt;egl：这是一个 egl_t 类型的成员变量，它最终将 EGL API 和 EGL 实现库了钩在一起。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么 gl_hook_t 和 egl_t 是什么呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gl_hook_t&lt;/strong&gt; 和 &lt;strong&gt;egl_t&lt;/strong&gt; 的定义如下所示：
&lt;em&gt;/frameworks/native/opengl/libs/hooks.h&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define GL_ENTRY(_r, _api, ...) _r (*_api)(__VA_ARGS__);
#define EGL_ENTRY(_r, _api, ...) _r (*_api)(__VA_ARGS__);
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;egl_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;EGL/egl_entries.in&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;gl_hooks_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;gl_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;entries.in&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;gl_ext_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// __eglMustCastToProperFunctionPointerType 是一个 typedef 的函数指针类型，它的返回值是void，参数也是void&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_NUMBER_OF_GL_EXTENSIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从上面的定义中我们发现，egl_t 和 gl_hooks_t 这两个结构体中主要就是一个 include 语句，那么它们包含的是什么呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#include “EGL/egl_entries.in&lt;/strong&gt;
包含的文件路径如下所示：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/egl_entries.in&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EGL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglGetDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NativeDisplayType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EGL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EGL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglTerminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EGL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglGetConfigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EGL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglChooseConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个文件中，我们可以看到所有的内容都是 EGL_ENTRY 宏定义的，根据 EGL_ENTRY 宏定义：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/hooks.h&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//下面的两个宏定义分别是 OpenGL 和 EGL API 函数的函数指针变量
//这些函数变量最后会和具体的 OpenGL 和 EGL API 的实现绑定在一起
#define GL_ENTRY(_r,_api,...) _r (*_api)(__VA_ARGS__);
#define EGL_ENTRY(_r,_api,...) _r(*_api)(__VA_ARGS__);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以将下面的这个宏定义展开成如下的形式:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EGL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglGetDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NativeDisplayType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//展开后的形式如下所示，它实际上就是 EGL API 函数声明&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglGetDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NativeDisplayType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;#include “entries.in”&lt;/strong&gt;
包含的文件路径为：
&lt;em&gt;/frameworks/native/opengl/libs/entries.in&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glReadPixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;和上面的 EGL_ENTRY 一样，GL_ENTRY 都是通过宏定义的形式来将 OpenGL ES 的 API 函数接口进行声明，例如，上面的宏定义声明可以展开成下面的形式：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GL_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glReadPixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 展开后的形式如下所示，它实际上就是 OpenGL ES API 函数声明&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glReadPixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，通过 entries.in 和 egl_entries.in 这两个文件，我们就可以得到 OpenGL ES 和 EGL 中的所有 API 函数接口的说明。&lt;/p&gt;

&lt;h4 id=&quot;332-surfaceflinger-初始化成员变量-megldisplay&quot;&gt;3.3.2 SurfaceFlinger 初始化成员变量 mEGLDisplay&lt;/h4&gt;
&lt;p&gt;在 SurfaceFlinger 类中有一个 EGLDisplay 类型的成员变量 mEGLDisplay，它是 EGL 中用来构建 OpenGL ES 渲染环境所需的参数。&lt;/p&gt;

&lt;p&gt;SurfaceFlinger 中调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eglGetDisplay()&lt;/code&gt; 初始化 mEGLDisplay 的代码如下：
&lt;em&gt;/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SurfaceFlinger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ALOGI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;SurfaceFlinger&apos;s main thread ready to run. &quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Initializing graphics H/W...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;status_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Autolock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mStateLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// initialize EGL for the default display&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 调用 eglGetDisplay 函数获取默认的显示设备&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mEGLDisplay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eglGetDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGL_DEFAULT_DISPLAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;eglInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mEGLDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;紧接着在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eglGetDisplay()&lt;/code&gt; 中调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;egl_init_drivers()&lt;/code&gt;
&lt;em&gt;/frameworks/native/opengl/libs/EGL/eglApi.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eglGetDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGLNativeDisplayType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 调用egl_init_drivers() 加载 OpenGL ES 库和 EGL 库&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_init_drivers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGL_BAD_PARAMETER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL_NO_DISPLAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;EGLDisplay&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egl_display_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFromNativeDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;egl_init_drivers()&lt;/code&gt; 函数中使用了 pthread_mutex_lock 上锁保护，继续调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;egl_init_drivers_locked()&lt;/code&gt; 函数
&lt;em&gt;/frameworks/native/opengl/libs/EGL/egl.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;egl_init_drivers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sInitDriverMutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 使用了 pthread_mutex_lock 上锁保护，继续调用 egl_init_drivers_locked&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egl_init_drivers_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sInitDriverMutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面就是对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;egl_init_drivers_locked()&lt;/code&gt; 函数进行一个分析：&lt;/p&gt;

&lt;p&gt;egl_init_drivers_locked() 函数代码如下所示：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/egl.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//在该文件起始位置定义的全局变量&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gEGLImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 描述EGL实现内容的结构体对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gl_hooks_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gHooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// gl_hooks_t 是包含 OpenGL ES API 函数声明对应的函数指针结构体&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gl_hooks_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gHooksNoContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pthread_key_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gGLWrapperKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGLBoolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;egl_init_drivers_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sEarlyInitState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// initialized by static ctor. should be set here.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 得到 Loader 对象单例&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get our driver loader&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//  gEGLImple 是一个全局变量，数据类型为 egl_connection_t 结构体类型&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// dynamically load our EGL implementation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gEGLImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// cnx-&amp;gt;dso 本质上是一个 (void *)类型的指针，它指向的对象是 EGL 共享库打开之后的句柄&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;// &amp;gt;= 将cnx中的 hooks 数组中指向OpenGL ES API 函数指针结构体指的数组成员，用 gHooks 中的成员的地址去初始化&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//也就是说 gEGLImpl 中 hook 数组指向 gHooks 数组，最终指向同一个 OpenGL ES API 函数指针的实现&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLESv1_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gHooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLESv1_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLESv2_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gHooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLESv2_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// &amp;gt;= 最后通过loader对象的open函数开始加载 OpenGL ES 和 EGL wrapper 库&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL_TRUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个函数中，有一个非常关键的 egl_connection_t 指针指向一个全局变量 gEGLImpl，当第一次初始化加载 OpenGL ES 实现库和 EGL 实现库时，还需要将 gEGLImpl 中的 hooks 数组中的两个指针指向一个全局的 gl_hooks_t 数组 gHooks（这就是两个指针钩子，最终初始化完成后将分别勾住 OpenGL ES 1.0 和 OpenGL ES 2.0 的实现库），接着调用 Loader 类的实例的 open() 函数完成从 OpenGL ES 实现库中完成符号解析工作。&lt;/p&gt;

&lt;h4 id=&quot;333-通过-loader-类加载和解析-opengl-es-库和-egl-库&quot;&gt;3.3.3 通过 Loader 类加载和解析 OpenGL ES 库和 EGL 库&lt;/h4&gt;

&lt;p&gt;Loader::open() 函数的代码如下所示：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/Loader.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &amp;gt;= Loader 类对象构造完成后，就在 /EGL/egl.cpp 文件中的 egl_init_drivers_locked() 中被调用&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATRACE_CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;setEmulatorGlesValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GLES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv1_CM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Always load EGL first&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GLESv1_CM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv1_CM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv1_CM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GLESv2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GLESv2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LOG_ALWAYS_FATAL_IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;couldn&apos;t find an OpenGL ES implementation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libEgl&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGL_WRAPPER_DIR&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/libEGL.so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libGles2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGL_WRAPPER_DIR&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/libGLESv2.so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libGles1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGL_WRAPPER_DIR&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/libGLESv1_CM.so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LOG_ALWAYS_FATAL_IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libEgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;couldn&apos;t load system EGL wrapper libraries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LOG_ALWAYS_FATAL_IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libGles2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libGles1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;couldn&apos;t load system OpenGL ES wrapper libraries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()&lt;/code&gt; 函数主要负责 OpenGL ES 库加载前的准备工作，具体的加载细节，则是通过调用 load_driver() 去完成的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader::load_driver()&lt;/code&gt; 函数代码如下所示：
&lt;em&gt;/frameworks/native/opengl/libs/EGL/Loader.cpp&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ATRACE_CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mGetDriverNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android_namespace_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mGetDriverNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_updated_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//加载 OpenGL ES 实现库，放回打开的共享链接库的句柄&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_system_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 解析 EGL 库，并将wrapper 库 libEGL.so 中的函数 API 指针和具体的实现绑定在一起&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EGL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getProcAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getProcAddressType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;eglGetProcAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ALOGE_IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&quot;can&apos;t find eglGetProcAddress() in EGL driver library&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;egl_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//将 egl 指针指向描述当前系统支持 OpenGL ES和 EGL 全局变量的 gEGLImpl&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egl_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//egl_names 是定义在 egl.cpp 文件中的一个数组，数组中的元素是 EGL API 函数指针&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// couldn&apos;t find the entry-point, use eglGetProcAddress()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这一步就是最关键的将共享链接库中的 EGL API 的实现和上层调用的 API 函数指针绑定在一起&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//指向下一个需要绑定的 api 函数&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 解析 OpenGL ES 库中的 OpenGL ES 1.x API 符号&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv1_CM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 调用 init_api 实现 OpenGL API 和对应实现函数的绑定&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gl_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// gl_names 是定义在 egl.cpp 文件中的一个数组，数组中的元素是 OpenGL ES API 函数指针&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLESv1_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//gl成员变量是一个结构体变量，结构体中的是 OpenGL ES API 函数指针&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;getProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 解析 OpenGL ES 库中的 OpenGL ES 2.0 API 符号&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLESv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gl_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eglMustCastToProperFunctionPointerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egl_connection_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLESv2_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;getProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loader::load_driver()&lt;/code&gt; 它主要实现了两个功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_system_driver() &lt;/code&gt; 函数查找 OpenGL ES/EGL 实现库，并在指定的存放路径中找到共享链接库文件并打开它。&lt;/li&gt;
  &lt;li&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_api()&lt;/code&gt;解析打开的 OpenGL ES/EGL 共享链接库，将 OpenGL ES/EGL API 函数指针和共享链接库中实现的对应的函数符号绑定在一起，这样调用 OpenGL ES/EGL API 就会调用到具体实现的OpenGL ES/EGL 共享链接库中对应函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_system_driver()&lt;/code&gt; 函数和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_api()&lt;/code&gt; 函数的实现就不一一展开了，大家可以到 &lt;em&gt;/frameworks/native/opengl/libs/EGL/Loader.cpp&lt;/em&gt; 文件中查看，应该写得非常直接清楚了。&lt;/p&gt;

&lt;h3 id=&quot;34-小结&quot;&gt;3.4 &lt;strong&gt;小结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;至此，有关 OpenGL ES/EGL 库的加载和解析过程就分析完了，&lt;strong&gt;整个加载和解析的目的就是将 OpenGL ES/EGL API 和具体实现函数绑定在一起&lt;/strong&gt;，这样当程序调用 OpenGL ES/EGL API 时，就会调用到实际的实现函数了。然后，在硬件平台上的 Android 系统加载的是硬件厂商提供的 OpenGL ES/EGL 实现库，而在 qemu 模拟器中运行的 Android 系统中加载的则是软件模拟实现的 
OpenGL ES/EGL 库或者是将 OpenGL ES 重定向到主机系统中进行硬件加速的库。&lt;/p&gt;

&lt;h3 id=&quot;35-参考文章&quot;&gt;3.5 参考文章&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.2net.co.uk/tutorial/android-egl-cgf-is-dead&quot;&gt;How Android finds OpenGL libraries, and the death of egl.cfg&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 05 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/android/2017/09/05/Android%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BD%A2%E6%A0%88OpenGLES%E5%92%8CEGL%E5%BA%93%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.html</link>
        <guid isPermaLink="true">http://localhost:4000/android/2017/09/05/Android%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BD%A2%E6%A0%88OpenGLES%E5%92%8CEGL%E5%BA%93%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.html</guid>
        
        <category>Android</category>
        
        <category>OpenGLES</category>
        
        <category>EGL</category>
        
        <category>Graphic</category>
        
        
        <category>android</category>
        
      </item>
    
  </channel>
</rss>
